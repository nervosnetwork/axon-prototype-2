// Generated by Molecule 0.7.2

use super::super::common::*;
use molecule::prelude::*;
#[derive(Clone)]
pub struct TaskMode(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for TaskMode {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for TaskMode {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for TaskMode {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        let raw_data = hex_string(&self.raw_data());
        write!(f, "{}(0x{})", Self::NAME, raw_data)
    }
}
impl ::core::default::Default for TaskMode {
    fn default() -> Self {
        let v: Vec<u8> = vec![0];
        TaskMode::new_unchecked(v.into())
    }
}
impl TaskMode {
    pub const ITEM_COUNT: usize = 1;
    pub const ITEM_SIZE: usize = 1;
    pub const TOTAL_SIZE: usize = 1;

    pub fn nth0(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(0..1))
    }

    pub fn raw_data(&self) -> molecule::bytes::Bytes {
        self.as_bytes()
    }

    pub fn as_reader<'r>(&'r self) -> TaskModeReader<'r> {
        TaskModeReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for TaskMode {
    type Builder = TaskModeBuilder;

    const NAME: &'static str = "TaskMode";

    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        TaskMode(data)
    }

    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }

    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }

    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        TaskModeReader::from_slice(slice).map(|reader| reader.to_entity())
    }

    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        TaskModeReader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }

    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }

    fn as_builder(self) -> Self::Builder {
        Self::new_builder().set([self.nth0()])
    }
}
#[derive(Clone, Copy)]
pub struct TaskModeReader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for TaskModeReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for TaskModeReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for TaskModeReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        let raw_data = hex_string(&self.raw_data());
        write!(f, "{}(0x{})", Self::NAME, raw_data)
    }
}
impl<'r> TaskModeReader<'r> {
    pub const ITEM_COUNT: usize = 1;
    pub const ITEM_SIZE: usize = 1;
    pub const TOTAL_SIZE: usize = 1;

    pub fn nth0(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[0..1])
    }

    pub fn raw_data(&self) -> &'r [u8] {
        self.as_slice()
    }
}
impl<'r> molecule::prelude::Reader<'r> for TaskModeReader<'r> {
    type Entity = TaskMode;

    const NAME: &'static str = "TaskModeReader";

    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().to_owned().into())
    }

    fn new_unchecked(slice: &'r [u8]) -> Self {
        TaskModeReader(slice)
    }

    fn as_slice(&self) -> &'r [u8] {
        self.0
    }

    fn verify(slice: &[u8], _compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len != Self::TOTAL_SIZE {
            return ve!(Self, TotalSizeNotMatch, Self::TOTAL_SIZE, slice_len);
        }
        Ok(())
    }
}
pub struct TaskModeBuilder(pub(crate) [Byte; 1]);
impl ::core::fmt::Debug for TaskModeBuilder {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:?})", Self::NAME, &self.0[..])
    }
}
impl ::core::default::Default for TaskModeBuilder {
    fn default() -> Self {
        TaskModeBuilder([Byte::default()])
    }
}
impl TaskModeBuilder {
    pub const ITEM_COUNT: usize = 1;
    pub const ITEM_SIZE: usize = 1;
    pub const TOTAL_SIZE: usize = 1;

    pub fn set(mut self, v: [Byte; 1]) -> Self {
        self.0 = v;
        self
    }

    pub fn nth0(mut self, v: Byte) -> Self {
        self.0[0] = v;
        self
    }
}
impl molecule::prelude::Builder for TaskModeBuilder {
    type Entity = TaskMode;

    const NAME: &'static str = "TaskModeBuilder";

    fn expected_length(&self) -> usize {
        Self::TOTAL_SIZE
    }

    fn write<W: molecule::io::Write>(&self, writer: &mut W) -> molecule::io::Result<()> {
        writer.write_all(self.0[0].as_slice())?;
        Ok(())
    }

    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        TaskMode::new_unchecked(inner.into())
    }
}
#[derive(Clone)]
pub struct TaskStatus(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for TaskStatus {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for TaskStatus {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for TaskStatus {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        let raw_data = hex_string(&self.raw_data());
        write!(f, "{}(0x{})", Self::NAME, raw_data)
    }
}
impl ::core::default::Default for TaskStatus {
    fn default() -> Self {
        let v: Vec<u8> = vec![0];
        TaskStatus::new_unchecked(v.into())
    }
}
impl TaskStatus {
    pub const ITEM_COUNT: usize = 1;
    pub const ITEM_SIZE: usize = 1;
    pub const TOTAL_SIZE: usize = 1;

    pub fn nth0(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(0..1))
    }

    pub fn raw_data(&self) -> molecule::bytes::Bytes {
        self.as_bytes()
    }

    pub fn as_reader<'r>(&'r self) -> TaskStatusReader<'r> {
        TaskStatusReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for TaskStatus {
    type Builder = TaskStatusBuilder;

    const NAME: &'static str = "TaskStatus";

    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        TaskStatus(data)
    }

    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }

    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }

    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        TaskStatusReader::from_slice(slice).map(|reader| reader.to_entity())
    }

    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        TaskStatusReader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }

    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }

    fn as_builder(self) -> Self::Builder {
        Self::new_builder().set([self.nth0()])
    }
}
#[derive(Clone, Copy)]
pub struct TaskStatusReader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for TaskStatusReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for TaskStatusReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for TaskStatusReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        let raw_data = hex_string(&self.raw_data());
        write!(f, "{}(0x{})", Self::NAME, raw_data)
    }
}
impl<'r> TaskStatusReader<'r> {
    pub const ITEM_COUNT: usize = 1;
    pub const ITEM_SIZE: usize = 1;
    pub const TOTAL_SIZE: usize = 1;

    pub fn nth0(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[0..1])
    }

    pub fn raw_data(&self) -> &'r [u8] {
        self.as_slice()
    }
}
impl<'r> molecule::prelude::Reader<'r> for TaskStatusReader<'r> {
    type Entity = TaskStatus;

    const NAME: &'static str = "TaskStatusReader";

    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().to_owned().into())
    }

    fn new_unchecked(slice: &'r [u8]) -> Self {
        TaskStatusReader(slice)
    }

    fn as_slice(&self) -> &'r [u8] {
        self.0
    }

    fn verify(slice: &[u8], _compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len != Self::TOTAL_SIZE {
            return ve!(Self, TotalSizeNotMatch, Self::TOTAL_SIZE, slice_len);
        }
        Ok(())
    }
}
pub struct TaskStatusBuilder(pub(crate) [Byte; 1]);
impl ::core::fmt::Debug for TaskStatusBuilder {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:?})", Self::NAME, &self.0[..])
    }
}
impl ::core::default::Default for TaskStatusBuilder {
    fn default() -> Self {
        TaskStatusBuilder([Byte::default()])
    }
}
impl TaskStatusBuilder {
    pub const ITEM_COUNT: usize = 1;
    pub const ITEM_SIZE: usize = 1;
    pub const TOTAL_SIZE: usize = 1;

    pub fn set(mut self, v: [Byte; 1]) -> Self {
        self.0 = v;
        self
    }

    pub fn nth0(mut self, v: Byte) -> Self {
        self.0[0] = v;
        self
    }
}
impl molecule::prelude::Builder for TaskStatusBuilder {
    type Entity = TaskStatus;

    const NAME: &'static str = "TaskStatusBuilder";

    fn expected_length(&self) -> usize {
        Self::TOTAL_SIZE
    }

    fn write<W: molecule::io::Write>(&self, writer: &mut W) -> molecule::io::Result<()> {
        writer.write_all(self.0[0].as_slice())?;
        Ok(())
    }

    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        TaskStatus::new_unchecked(inner.into())
    }
}
#[derive(Clone)]
pub struct SidechainBlockHeaders(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for SidechainBlockHeaders {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for SidechainBlockHeaders {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for SidechainBlockHeaders {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} [", Self::NAME)?;
        for i in 0..self.len() {
            if i == 0 {
                write!(f, "{}", self.get_unchecked(i))?;
            } else {
                write!(f, ", {}", self.get_unchecked(i))?;
            }
        }
        write!(f, "]")
    }
}
impl ::core::default::Default for SidechainBlockHeaders {
    fn default() -> Self {
        let v: Vec<u8> = vec![0, 0, 0, 0];
        SidechainBlockHeaders::new_unchecked(v.into())
    }
}
impl SidechainBlockHeaders {
    pub const ITEM_SIZE: usize = 32;

    pub fn total_size(&self) -> usize {
        molecule::NUMBER_SIZE + Self::ITEM_SIZE * self.item_count()
    }

    pub fn item_count(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }

    pub fn len(&self) -> usize {
        self.item_count()
    }

    pub fn is_empty(&self) -> bool {
        self.len() == 0
    }

    pub fn get(&self, idx: usize) -> Option<BlockHeader> {
        if idx >= self.len() {
            None
        } else {
            Some(self.get_unchecked(idx))
        }
    }

    pub fn get_unchecked(&self, idx: usize) -> BlockHeader {
        let start = molecule::NUMBER_SIZE + Self::ITEM_SIZE * idx;
        let end = start + Self::ITEM_SIZE;
        BlockHeader::new_unchecked(self.0.slice(start..end))
    }

    pub fn as_reader<'r>(&'r self) -> SidechainBlockHeadersReader<'r> {
        SidechainBlockHeadersReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for SidechainBlockHeaders {
    type Builder = SidechainBlockHeadersBuilder;

    const NAME: &'static str = "SidechainBlockHeaders";

    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        SidechainBlockHeaders(data)
    }

    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }

    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }

    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        SidechainBlockHeadersReader::from_slice(slice).map(|reader| reader.to_entity())
    }

    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        SidechainBlockHeadersReader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }

    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }

    fn as_builder(self) -> Self::Builder {
        Self::new_builder().extend(self.into_iter())
    }
}
#[derive(Clone, Copy)]
pub struct SidechainBlockHeadersReader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for SidechainBlockHeadersReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for SidechainBlockHeadersReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for SidechainBlockHeadersReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} [", Self::NAME)?;
        for i in 0..self.len() {
            if i == 0 {
                write!(f, "{}", self.get_unchecked(i))?;
            } else {
                write!(f, ", {}", self.get_unchecked(i))?;
            }
        }
        write!(f, "]")
    }
}
impl<'r> SidechainBlockHeadersReader<'r> {
    pub const ITEM_SIZE: usize = 32;

    pub fn total_size(&self) -> usize {
        molecule::NUMBER_SIZE + Self::ITEM_SIZE * self.item_count()
    }

    pub fn item_count(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }

    pub fn len(&self) -> usize {
        self.item_count()
    }

    pub fn is_empty(&self) -> bool {
        self.len() == 0
    }

    pub fn get(&self, idx: usize) -> Option<BlockHeaderReader<'r>> {
        if idx >= self.len() {
            None
        } else {
            Some(self.get_unchecked(idx))
        }
    }

    pub fn get_unchecked(&self, idx: usize) -> BlockHeaderReader<'r> {
        let start = molecule::NUMBER_SIZE + Self::ITEM_SIZE * idx;
        let end = start + Self::ITEM_SIZE;
        BlockHeaderReader::new_unchecked(&self.as_slice()[start..end])
    }
}
impl<'r> molecule::prelude::Reader<'r> for SidechainBlockHeadersReader<'r> {
    type Entity = SidechainBlockHeaders;

    const NAME: &'static str = "SidechainBlockHeadersReader";

    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().to_owned().into())
    }

    fn new_unchecked(slice: &'r [u8]) -> Self {
        SidechainBlockHeadersReader(slice)
    }

    fn as_slice(&self) -> &'r [u8] {
        self.0
    }

    fn verify(slice: &[u8], _compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len < molecule::NUMBER_SIZE {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE, slice_len);
        }
        let item_count = molecule::unpack_number(slice) as usize;
        if item_count == 0 {
            if slice_len != molecule::NUMBER_SIZE {
                return ve!(Self, TotalSizeNotMatch, molecule::NUMBER_SIZE, slice_len);
            }
            return Ok(());
        }
        let total_size = molecule::NUMBER_SIZE + Self::ITEM_SIZE * item_count;
        if slice_len != total_size {
            return ve!(Self, TotalSizeNotMatch, total_size, slice_len);
        }
        Ok(())
    }
}
#[derive(Debug, Default)]
pub struct SidechainBlockHeadersBuilder(pub(crate) Vec<BlockHeader>);
impl SidechainBlockHeadersBuilder {
    pub const ITEM_SIZE: usize = 32;

    pub fn set(mut self, v: Vec<BlockHeader>) -> Self {
        self.0 = v;
        self
    }

    pub fn push(mut self, v: BlockHeader) -> Self {
        self.0.push(v);
        self
    }

    pub fn extend<T: ::core::iter::IntoIterator<Item = BlockHeader>>(mut self, iter: T) -> Self {
        for elem in iter {
            self.0.push(elem);
        }
        self
    }
}
impl molecule::prelude::Builder for SidechainBlockHeadersBuilder {
    type Entity = SidechainBlockHeaders;

    const NAME: &'static str = "SidechainBlockHeadersBuilder";

    fn expected_length(&self) -> usize {
        molecule::NUMBER_SIZE + Self::ITEM_SIZE * self.0.len()
    }

    fn write<W: molecule::io::Write>(&self, writer: &mut W) -> molecule::io::Result<()> {
        writer.write_all(&molecule::pack_number(self.0.len() as molecule::Number))?;
        for inner in &self.0[..] {
            writer.write_all(inner.as_slice())?;
        }
        Ok(())
    }

    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        SidechainBlockHeaders::new_unchecked(inner.into())
    }
}
pub struct SidechainBlockHeadersIterator(SidechainBlockHeaders, usize, usize);
impl ::core::iter::Iterator for SidechainBlockHeadersIterator {
    type Item = BlockHeader;

    fn next(&mut self) -> Option<Self::Item> {
        if self.1 >= self.2 {
            None
        } else {
            let ret = self.0.get_unchecked(self.1);
            self.1 += 1;
            Some(ret)
        }
    }
}
impl ::core::iter::ExactSizeIterator for SidechainBlockHeadersIterator {
    fn len(&self) -> usize {
        self.2 - self.1
    }
}
impl ::core::iter::IntoIterator for SidechainBlockHeaders {
    type IntoIter = SidechainBlockHeadersIterator;
    type Item = BlockHeader;

    fn into_iter(self) -> Self::IntoIter {
        let len = self.len();
        SidechainBlockHeadersIterator(self, 0, len)
    }
}
impl<'r> SidechainBlockHeadersReader<'r> {
    pub fn iter<'t>(&'t self) -> SidechainBlockHeadersReaderIterator<'t, 'r> {
        SidechainBlockHeadersReaderIterator(&self, 0, self.len())
    }
}
pub struct SidechainBlockHeadersReaderIterator<'t, 'r>(&'t SidechainBlockHeadersReader<'r>, usize, usize);
impl<'t: 'r, 'r> ::core::iter::Iterator for SidechainBlockHeadersReaderIterator<'t, 'r> {
    type Item = BlockHeaderReader<'t>;

    fn next(&mut self) -> Option<Self::Item> {
        if self.1 >= self.2 {
            None
        } else {
            let ret = self.0.get_unchecked(self.1);
            self.1 += 1;
            Some(ret)
        }
    }
}
impl<'t: 'r, 'r> ::core::iter::ExactSizeIterator for SidechainBlockHeadersReaderIterator<'t, 'r> {
    fn len(&self) -> usize {
        self.2 - self.1
    }
}
#[derive(Clone)]
pub struct TaskCell(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for TaskCell {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for TaskCell {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for TaskCell {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "version", self.version())?;
        write!(f, ", {}: {}", "sidechain_block_height_from", self.sidechain_block_height_from())?;
        write!(f, ", {}: {}", "sidechain_block_height_to", self.sidechain_block_height_to())?;
        write!(f, ", {}: {}", "refresh_sidechain_height", self.refresh_sidechain_height())?;
        write!(f, ", {}: {}", "check_data_size", self.check_data_size())?;
        write!(f, ", {}: {}", "mode", self.mode())?;
        write!(f, ", {}: {}", "status", self.status())?;
        write!(f, ", {}: {}", "reveal", self.reveal())?;
        write!(f, ", {}: {}", "commit", self.commit())?;
        write!(f, ", {}: {}", "sidechain_block_header", self.sidechain_block_header())?;
        let extra_count = self.count_extra_fields();
        if extra_count != 0 {
            write!(f, ", .. ({} fields)", extra_count)?;
        }
        write!(f, " }}")
    }
}
impl ::core::default::Default for TaskCell {
    fn default() -> Self {
        let v: Vec<u8> = vec![
            179, 0, 0, 0, 44, 0, 0, 0, 45, 0, 0, 0, 61, 0, 0, 0, 77, 0, 0, 0, 93, 0, 0, 0, 109, 0, 0, 0, 110, 0, 0, 0, 111, 0, 0, 0, 143,
            0, 0, 0, 175, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        ];
        TaskCell::new_unchecked(v.into())
    }
}
impl TaskCell {
    pub const FIELD_COUNT: usize = 10;

    pub fn total_size(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }

    pub fn field_count(&self) -> usize {
        if self.total_size() == molecule::NUMBER_SIZE {
            0
        } else {
            (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1
        }
    }

    pub fn count_extra_fields(&self) -> usize {
        self.field_count() - Self::FIELD_COUNT
    }

    pub fn has_extra_fields(&self) -> bool {
        Self::FIELD_COUNT != self.field_count()
    }

    pub fn version(&self) -> Uint8 {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[4..]) as usize;
        let end = molecule::unpack_number(&slice[8..]) as usize;
        Uint8::new_unchecked(self.0.slice(start..end))
    }

    pub fn sidechain_block_height_from(&self) -> BlockHeight {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[8..]) as usize;
        let end = molecule::unpack_number(&slice[12..]) as usize;
        BlockHeight::new_unchecked(self.0.slice(start..end))
    }

    pub fn sidechain_block_height_to(&self) -> BlockHeight {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[12..]) as usize;
        let end = molecule::unpack_number(&slice[16..]) as usize;
        BlockHeight::new_unchecked(self.0.slice(start..end))
    }

    pub fn refresh_sidechain_height(&self) -> BlockHeight {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[16..]) as usize;
        let end = molecule::unpack_number(&slice[20..]) as usize;
        BlockHeight::new_unchecked(self.0.slice(start..end))
    }

    pub fn check_data_size(&self) -> Uint128 {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[20..]) as usize;
        let end = molecule::unpack_number(&slice[24..]) as usize;
        Uint128::new_unchecked(self.0.slice(start..end))
    }

    pub fn mode(&self) -> TaskMode {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[24..]) as usize;
        let end = molecule::unpack_number(&slice[28..]) as usize;
        TaskMode::new_unchecked(self.0.slice(start..end))
    }

    pub fn status(&self) -> TaskStatus {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[28..]) as usize;
        let end = molecule::unpack_number(&slice[32..]) as usize;
        TaskStatus::new_unchecked(self.0.slice(start..end))
    }

    pub fn reveal(&self) -> RandomSeed {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[32..]) as usize;
        let end = molecule::unpack_number(&slice[36..]) as usize;
        RandomSeed::new_unchecked(self.0.slice(start..end))
    }

    pub fn commit(&self) -> CommittedHash {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[36..]) as usize;
        let end = molecule::unpack_number(&slice[40..]) as usize;
        CommittedHash::new_unchecked(self.0.slice(start..end))
    }

    pub fn sidechain_block_header(&self) -> SidechainBlockHeaders {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[40..]) as usize;
        if self.has_extra_fields() {
            let end = molecule::unpack_number(&slice[44..]) as usize;
            SidechainBlockHeaders::new_unchecked(self.0.slice(start..end))
        } else {
            SidechainBlockHeaders::new_unchecked(self.0.slice(start..))
        }
    }

    pub fn as_reader<'r>(&'r self) -> TaskCellReader<'r> {
        TaskCellReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for TaskCell {
    type Builder = TaskCellBuilder;

    const NAME: &'static str = "TaskCell";

    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        TaskCell(data)
    }

    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }

    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }

    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        TaskCellReader::from_slice(slice).map(|reader| reader.to_entity())
    }

    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        TaskCellReader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }

    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }

    fn as_builder(self) -> Self::Builder {
        Self::new_builder()
            .version(self.version())
            .sidechain_block_height_from(self.sidechain_block_height_from())
            .sidechain_block_height_to(self.sidechain_block_height_to())
            .refresh_sidechain_height(self.refresh_sidechain_height())
            .check_data_size(self.check_data_size())
            .mode(self.mode())
            .status(self.status())
            .reveal(self.reveal())
            .commit(self.commit())
            .sidechain_block_header(self.sidechain_block_header())
    }
}
#[derive(Clone, Copy)]
pub struct TaskCellReader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for TaskCellReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for TaskCellReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for TaskCellReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "version", self.version())?;
        write!(f, ", {}: {}", "sidechain_block_height_from", self.sidechain_block_height_from())?;
        write!(f, ", {}: {}", "sidechain_block_height_to", self.sidechain_block_height_to())?;
        write!(f, ", {}: {}", "refresh_sidechain_height", self.refresh_sidechain_height())?;
        write!(f, ", {}: {}", "check_data_size", self.check_data_size())?;
        write!(f, ", {}: {}", "mode", self.mode())?;
        write!(f, ", {}: {}", "status", self.status())?;
        write!(f, ", {}: {}", "reveal", self.reveal())?;
        write!(f, ", {}: {}", "commit", self.commit())?;
        write!(f, ", {}: {}", "sidechain_block_header", self.sidechain_block_header())?;
        let extra_count = self.count_extra_fields();
        if extra_count != 0 {
            write!(f, ", .. ({} fields)", extra_count)?;
        }
        write!(f, " }}")
    }
}
impl<'r> TaskCellReader<'r> {
    pub const FIELD_COUNT: usize = 10;

    pub fn total_size(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }

    pub fn field_count(&self) -> usize {
        if self.total_size() == molecule::NUMBER_SIZE {
            0
        } else {
            (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1
        }
    }

    pub fn count_extra_fields(&self) -> usize {
        self.field_count() - Self::FIELD_COUNT
    }

    pub fn has_extra_fields(&self) -> bool {
        Self::FIELD_COUNT != self.field_count()
    }

    pub fn version(&self) -> Uint8Reader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[4..]) as usize;
        let end = molecule::unpack_number(&slice[8..]) as usize;
        Uint8Reader::new_unchecked(&self.as_slice()[start..end])
    }

    pub fn sidechain_block_height_from(&self) -> BlockHeightReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[8..]) as usize;
        let end = molecule::unpack_number(&slice[12..]) as usize;
        BlockHeightReader::new_unchecked(&self.as_slice()[start..end])
    }

    pub fn sidechain_block_height_to(&self) -> BlockHeightReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[12..]) as usize;
        let end = molecule::unpack_number(&slice[16..]) as usize;
        BlockHeightReader::new_unchecked(&self.as_slice()[start..end])
    }

    pub fn refresh_sidechain_height(&self) -> BlockHeightReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[16..]) as usize;
        let end = molecule::unpack_number(&slice[20..]) as usize;
        BlockHeightReader::new_unchecked(&self.as_slice()[start..end])
    }

    pub fn check_data_size(&self) -> Uint128Reader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[20..]) as usize;
        let end = molecule::unpack_number(&slice[24..]) as usize;
        Uint128Reader::new_unchecked(&self.as_slice()[start..end])
    }

    pub fn mode(&self) -> TaskModeReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[24..]) as usize;
        let end = molecule::unpack_number(&slice[28..]) as usize;
        TaskModeReader::new_unchecked(&self.as_slice()[start..end])
    }

    pub fn status(&self) -> TaskStatusReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[28..]) as usize;
        let end = molecule::unpack_number(&slice[32..]) as usize;
        TaskStatusReader::new_unchecked(&self.as_slice()[start..end])
    }

    pub fn reveal(&self) -> RandomSeedReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[32..]) as usize;
        let end = molecule::unpack_number(&slice[36..]) as usize;
        RandomSeedReader::new_unchecked(&self.as_slice()[start..end])
    }

    pub fn commit(&self) -> CommittedHashReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[36..]) as usize;
        let end = molecule::unpack_number(&slice[40..]) as usize;
        CommittedHashReader::new_unchecked(&self.as_slice()[start..end])
    }

    pub fn sidechain_block_header(&self) -> SidechainBlockHeadersReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[40..]) as usize;
        if self.has_extra_fields() {
            let end = molecule::unpack_number(&slice[44..]) as usize;
            SidechainBlockHeadersReader::new_unchecked(&self.as_slice()[start..end])
        } else {
            SidechainBlockHeadersReader::new_unchecked(&self.as_slice()[start..])
        }
    }
}
impl<'r> molecule::prelude::Reader<'r> for TaskCellReader<'r> {
    type Entity = TaskCell;

    const NAME: &'static str = "TaskCellReader";

    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().to_owned().into())
    }

    fn new_unchecked(slice: &'r [u8]) -> Self {
        TaskCellReader(slice)
    }

    fn as_slice(&self) -> &'r [u8] {
        self.0
    }

    fn verify(slice: &[u8], compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len < molecule::NUMBER_SIZE {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE, slice_len);
        }
        let total_size = molecule::unpack_number(slice) as usize;
        if slice_len != total_size {
            return ve!(Self, TotalSizeNotMatch, total_size, slice_len);
        }
        if slice_len == molecule::NUMBER_SIZE && Self::FIELD_COUNT == 0 {
            return Ok(());
        }
        if slice_len < molecule::NUMBER_SIZE * 2 {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE * 2, slice_len);
        }
        let offset_first = molecule::unpack_number(&slice[molecule::NUMBER_SIZE..]) as usize;
        if offset_first % molecule::NUMBER_SIZE != 0 || offset_first < molecule::NUMBER_SIZE * 2 {
            return ve!(Self, OffsetsNotMatch);
        }
        if slice_len < offset_first {
            return ve!(Self, HeaderIsBroken, offset_first, slice_len);
        }
        let field_count = offset_first / molecule::NUMBER_SIZE - 1;
        if field_count < Self::FIELD_COUNT {
            return ve!(Self, FieldCountNotMatch, Self::FIELD_COUNT, field_count);
        } else if !compatible && field_count > Self::FIELD_COUNT {
            return ve!(Self, FieldCountNotMatch, Self::FIELD_COUNT, field_count);
        };
        let mut offsets: Vec<usize> = slice[molecule::NUMBER_SIZE..offset_first]
            .chunks_exact(molecule::NUMBER_SIZE)
            .map(|x| molecule::unpack_number(x) as usize)
            .collect();
        offsets.push(total_size);
        if offsets.windows(2).any(|i| i[0] > i[1]) {
            return ve!(Self, OffsetsNotMatch);
        }
        Uint8Reader::verify(&slice[offsets[0]..offsets[1]], compatible)?;
        BlockHeightReader::verify(&slice[offsets[1]..offsets[2]], compatible)?;
        BlockHeightReader::verify(&slice[offsets[2]..offsets[3]], compatible)?;
        BlockHeightReader::verify(&slice[offsets[3]..offsets[4]], compatible)?;
        Uint128Reader::verify(&slice[offsets[4]..offsets[5]], compatible)?;
        TaskModeReader::verify(&slice[offsets[5]..offsets[6]], compatible)?;
        TaskStatusReader::verify(&slice[offsets[6]..offsets[7]], compatible)?;
        RandomSeedReader::verify(&slice[offsets[7]..offsets[8]], compatible)?;
        CommittedHashReader::verify(&slice[offsets[8]..offsets[9]], compatible)?;
        SidechainBlockHeadersReader::verify(&slice[offsets[9]..offsets[10]], compatible)?;
        Ok(())
    }
}
#[derive(Debug, Default)]
pub struct TaskCellBuilder {
    pub(crate) version: Uint8,
    pub(crate) sidechain_block_height_from: BlockHeight,
    pub(crate) sidechain_block_height_to: BlockHeight,
    pub(crate) refresh_sidechain_height: BlockHeight,
    pub(crate) check_data_size: Uint128,
    pub(crate) mode: TaskMode,
    pub(crate) status: TaskStatus,
    pub(crate) reveal: RandomSeed,
    pub(crate) commit: CommittedHash,
    pub(crate) sidechain_block_header: SidechainBlockHeaders,
}
impl TaskCellBuilder {
    pub const FIELD_COUNT: usize = 10;

    pub fn version(mut self, v: Uint8) -> Self {
        self.version = v;
        self
    }

    pub fn sidechain_block_height_from(mut self, v: BlockHeight) -> Self {
        self.sidechain_block_height_from = v;
        self
    }

    pub fn sidechain_block_height_to(mut self, v: BlockHeight) -> Self {
        self.sidechain_block_height_to = v;
        self
    }

    pub fn refresh_sidechain_height(mut self, v: BlockHeight) -> Self {
        self.refresh_sidechain_height = v;
        self
    }

    pub fn check_data_size(mut self, v: Uint128) -> Self {
        self.check_data_size = v;
        self
    }

    pub fn mode(mut self, v: TaskMode) -> Self {
        self.mode = v;
        self
    }

    pub fn status(mut self, v: TaskStatus) -> Self {
        self.status = v;
        self
    }

    pub fn reveal(mut self, v: RandomSeed) -> Self {
        self.reveal = v;
        self
    }

    pub fn commit(mut self, v: CommittedHash) -> Self {
        self.commit = v;
        self
    }

    pub fn sidechain_block_header(mut self, v: SidechainBlockHeaders) -> Self {
        self.sidechain_block_header = v;
        self
    }
}
impl molecule::prelude::Builder for TaskCellBuilder {
    type Entity = TaskCell;

    const NAME: &'static str = "TaskCellBuilder";

    fn expected_length(&self) -> usize {
        molecule::NUMBER_SIZE * (Self::FIELD_COUNT + 1)
            + self.version.as_slice().len()
            + self.sidechain_block_height_from.as_slice().len()
            + self.sidechain_block_height_to.as_slice().len()
            + self.refresh_sidechain_height.as_slice().len()
            + self.check_data_size.as_slice().len()
            + self.mode.as_slice().len()
            + self.status.as_slice().len()
            + self.reveal.as_slice().len()
            + self.commit.as_slice().len()
            + self.sidechain_block_header.as_slice().len()
    }

    fn write<W: molecule::io::Write>(&self, writer: &mut W) -> molecule::io::Result<()> {
        let mut total_size = molecule::NUMBER_SIZE * (Self::FIELD_COUNT + 1);
        let mut offsets = Vec::with_capacity(Self::FIELD_COUNT);
        offsets.push(total_size);
        total_size += self.version.as_slice().len();
        offsets.push(total_size);
        total_size += self.sidechain_block_height_from.as_slice().len();
        offsets.push(total_size);
        total_size += self.sidechain_block_height_to.as_slice().len();
        offsets.push(total_size);
        total_size += self.refresh_sidechain_height.as_slice().len();
        offsets.push(total_size);
        total_size += self.check_data_size.as_slice().len();
        offsets.push(total_size);
        total_size += self.mode.as_slice().len();
        offsets.push(total_size);
        total_size += self.status.as_slice().len();
        offsets.push(total_size);
        total_size += self.reveal.as_slice().len();
        offsets.push(total_size);
        total_size += self.commit.as_slice().len();
        offsets.push(total_size);
        total_size += self.sidechain_block_header.as_slice().len();
        writer.write_all(&molecule::pack_number(total_size as molecule::Number))?;
        for offset in offsets.into_iter() {
            writer.write_all(&molecule::pack_number(offset as molecule::Number))?;
        }
        writer.write_all(self.version.as_slice())?;
        writer.write_all(self.sidechain_block_height_from.as_slice())?;
        writer.write_all(self.sidechain_block_height_to.as_slice())?;
        writer.write_all(self.refresh_sidechain_height.as_slice())?;
        writer.write_all(self.check_data_size.as_slice())?;
        writer.write_all(self.mode.as_slice())?;
        writer.write_all(self.status.as_slice())?;
        writer.write_all(self.reveal.as_slice())?;
        writer.write_all(self.commit.as_slice())?;
        writer.write_all(self.sidechain_block_header.as_slice())?;
        Ok(())
    }

    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        TaskCell::new_unchecked(inner.into())
    }
}
#[derive(Clone)]
pub struct TaskCellTypeArgs(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for TaskCellTypeArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for TaskCellTypeArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for TaskCellTypeArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "chain_id", self.chain_id())?;
        write!(f, ", {}: {}", "checker_lock_arg", self.checker_lock_arg())?;
        write!(f, " }}")
    }
}
impl ::core::default::Default for TaskCellTypeArgs {
    fn default() -> Self {
        let v: Vec<u8> = vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
        TaskCellTypeArgs::new_unchecked(v.into())
    }
}
impl TaskCellTypeArgs {
    pub const FIELD_COUNT: usize = 2;
    pub const FIELD_SIZES: [usize; 2] = [4, 20];
    pub const TOTAL_SIZE: usize = 24;

    pub fn chain_id(&self) -> ChainId {
        ChainId::new_unchecked(self.0.slice(0..4))
    }

    pub fn checker_lock_arg(&self) -> PubKeyHash {
        PubKeyHash::new_unchecked(self.0.slice(4..24))
    }

    pub fn as_reader<'r>(&'r self) -> TaskCellTypeArgsReader<'r> {
        TaskCellTypeArgsReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for TaskCellTypeArgs {
    type Builder = TaskCellTypeArgsBuilder;

    const NAME: &'static str = "TaskCellTypeArgs";

    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        TaskCellTypeArgs(data)
    }

    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }

    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }

    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        TaskCellTypeArgsReader::from_slice(slice).map(|reader| reader.to_entity())
    }

    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        TaskCellTypeArgsReader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }

    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }

    fn as_builder(self) -> Self::Builder {
        Self::new_builder()
            .chain_id(self.chain_id())
            .checker_lock_arg(self.checker_lock_arg())
    }
}
#[derive(Clone, Copy)]
pub struct TaskCellTypeArgsReader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for TaskCellTypeArgsReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for TaskCellTypeArgsReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for TaskCellTypeArgsReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "chain_id", self.chain_id())?;
        write!(f, ", {}: {}", "checker_lock_arg", self.checker_lock_arg())?;
        write!(f, " }}")
    }
}
impl<'r> TaskCellTypeArgsReader<'r> {
    pub const FIELD_COUNT: usize = 2;
    pub const FIELD_SIZES: [usize; 2] = [4, 20];
    pub const TOTAL_SIZE: usize = 24;

    pub fn chain_id(&self) -> ChainIdReader<'r> {
        ChainIdReader::new_unchecked(&self.as_slice()[0..4])
    }

    pub fn checker_lock_arg(&self) -> PubKeyHashReader<'r> {
        PubKeyHashReader::new_unchecked(&self.as_slice()[4..24])
    }
}
impl<'r> molecule::prelude::Reader<'r> for TaskCellTypeArgsReader<'r> {
    type Entity = TaskCellTypeArgs;

    const NAME: &'static str = "TaskCellTypeArgsReader";

    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().to_owned().into())
    }

    fn new_unchecked(slice: &'r [u8]) -> Self {
        TaskCellTypeArgsReader(slice)
    }

    fn as_slice(&self) -> &'r [u8] {
        self.0
    }

    fn verify(slice: &[u8], _compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len != Self::TOTAL_SIZE {
            return ve!(Self, TotalSizeNotMatch, Self::TOTAL_SIZE, slice_len);
        }
        Ok(())
    }
}
#[derive(Debug, Default)]
pub struct TaskCellTypeArgsBuilder {
    pub(crate) chain_id:         ChainId,
    pub(crate) checker_lock_arg: PubKeyHash,
}
impl TaskCellTypeArgsBuilder {
    pub const FIELD_COUNT: usize = 2;
    pub const FIELD_SIZES: [usize; 2] = [4, 20];
    pub const TOTAL_SIZE: usize = 24;

    pub fn chain_id(mut self, v: ChainId) -> Self {
        self.chain_id = v;
        self
    }

    pub fn checker_lock_arg(mut self, v: PubKeyHash) -> Self {
        self.checker_lock_arg = v;
        self
    }
}
impl molecule::prelude::Builder for TaskCellTypeArgsBuilder {
    type Entity = TaskCellTypeArgs;

    const NAME: &'static str = "TaskCellTypeArgsBuilder";

    fn expected_length(&self) -> usize {
        Self::TOTAL_SIZE
    }

    fn write<W: molecule::io::Write>(&self, writer: &mut W) -> molecule::io::Result<()> {
        writer.write_all(self.chain_id.as_slice())?;
        writer.write_all(self.checker_lock_arg.as_slice())?;
        Ok(())
    }

    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        TaskCellTypeArgs::new_unchecked(inner.into())
    }
}
