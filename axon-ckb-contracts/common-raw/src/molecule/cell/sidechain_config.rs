// Generated by Molecule 0.7.0

use super::super::common::*;
use molecule::prelude::*;
#[derive(Clone)]
pub struct SidechainStatus(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for SidechainStatus {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for SidechainStatus {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for SidechainStatus {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        let raw_data = hex_string(&self.raw_data());
        write!(f, "{}(0x{})", Self::NAME, raw_data)
    }
}
impl ::core::default::Default for SidechainStatus {
    fn default() -> Self {
        let v: Vec<u8> = vec![0];
        SidechainStatus::new_unchecked(v.into())
    }
}
impl SidechainStatus {
    pub const ITEM_COUNT: usize = 1;
    pub const ITEM_SIZE: usize = 1;
    pub const TOTAL_SIZE: usize = 1;

    pub fn nth0(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(0..1))
    }

    pub fn raw_data(&self) -> molecule::bytes::Bytes {
        self.as_bytes()
    }

    pub fn as_reader<'r>(&'r self) -> SidechainStatusReader<'r> {
        SidechainStatusReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for SidechainStatus {
    type Builder = SidechainStatusBuilder;

    const NAME: &'static str = "SidechainStatus";

    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        SidechainStatus(data)
    }

    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }

    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }

    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        SidechainStatusReader::from_slice(slice).map(|reader| reader.to_entity())
    }

    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        SidechainStatusReader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }

    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }

    fn as_builder(self) -> Self::Builder {
        Self::new_builder().set([self.nth0()])
    }
}
#[derive(Clone, Copy)]
pub struct SidechainStatusReader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for SidechainStatusReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for SidechainStatusReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for SidechainStatusReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        let raw_data = hex_string(&self.raw_data());
        write!(f, "{}(0x{})", Self::NAME, raw_data)
    }
}
impl<'r> SidechainStatusReader<'r> {
    pub const ITEM_COUNT: usize = 1;
    pub const ITEM_SIZE: usize = 1;
    pub const TOTAL_SIZE: usize = 1;

    pub fn nth0(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[0..1])
    }

    pub fn raw_data(&self) -> &'r [u8] {
        self.as_slice()
    }
}
impl<'r> molecule::prelude::Reader<'r> for SidechainStatusReader<'r> {
    type Entity = SidechainStatus;

    const NAME: &'static str = "SidechainStatusReader";

    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().to_owned().into())
    }

    fn new_unchecked(slice: &'r [u8]) -> Self {
        SidechainStatusReader(slice)
    }

    fn as_slice(&self) -> &'r [u8] {
        self.0
    }

    fn verify(slice: &[u8], _compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len != Self::TOTAL_SIZE {
            return ve!(Self, TotalSizeNotMatch, Self::TOTAL_SIZE, slice_len);
        }
        Ok(())
    }
}
pub struct SidechainStatusBuilder(pub(crate) [Byte; 1]);
impl ::core::fmt::Debug for SidechainStatusBuilder {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:?})", Self::NAME, &self.0[..])
    }
}
impl ::core::default::Default for SidechainStatusBuilder {
    fn default() -> Self {
        SidechainStatusBuilder([Byte::default()])
    }
}
impl SidechainStatusBuilder {
    pub const ITEM_COUNT: usize = 1;
    pub const ITEM_SIZE: usize = 1;
    pub const TOTAL_SIZE: usize = 1;

    pub fn set(mut self, v: [Byte; 1]) -> Self {
        self.0 = v;
        self
    }

    pub fn nth0(mut self, v: Byte) -> Self {
        self.0[0] = v;
        self
    }
}
impl molecule::prelude::Builder for SidechainStatusBuilder {
    type Entity = SidechainStatus;

    const NAME: &'static str = "SidechainStatusBuilder";

    fn expected_length(&self) -> usize {
        Self::TOTAL_SIZE
    }

    fn write<W: ::molecule::io::Write>(&self, writer: &mut W) -> ::molecule::io::Result<()> {
        writer.write_all(self.0[0].as_slice())?;
        Ok(())
    }

    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        SidechainStatus::new_unchecked(inner.into())
    }
}
#[derive(Clone)]
pub struct CheckerInfoList(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for CheckerInfoList {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for CheckerInfoList {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for CheckerInfoList {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} [", Self::NAME)?;
        for i in 0..self.len() {
            if i == 0 {
                write!(f, "{}", self.get_unchecked(i))?;
            } else {
                write!(f, ", {}", self.get_unchecked(i))?;
            }
        }
        write!(f, "]")
    }
}
impl ::core::default::Default for CheckerInfoList {
    fn default() -> Self {
        let v: Vec<u8> = vec![0, 0, 0, 0];
        CheckerInfoList::new_unchecked(v.into())
    }
}
impl CheckerInfoList {
    pub const ITEM_SIZE: usize = 20;

    pub fn total_size(&self) -> usize {
        molecule::NUMBER_SIZE * (self.item_count() + 1)
    }

    pub fn item_count(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }

    pub fn len(&self) -> usize {
        self.item_count()
    }

    pub fn is_empty(&self) -> bool {
        self.len() == 0
    }

    pub fn get(&self, idx: usize) -> Option<PubKeyHash> {
        if idx >= self.len() {
            None
        } else {
            Some(self.get_unchecked(idx))
        }
    }

    pub fn get_unchecked(&self, idx: usize) -> PubKeyHash {
        let start = molecule::NUMBER_SIZE + Self::ITEM_SIZE * idx;
        let end = start + Self::ITEM_SIZE;
        PubKeyHash::new_unchecked(self.0.slice(start..end))
    }

    pub fn as_reader<'r>(&'r self) -> CheckerInfoListReader<'r> {
        CheckerInfoListReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for CheckerInfoList {
    type Builder = CheckerInfoListBuilder;

    const NAME: &'static str = "CheckerInfoList";

    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        CheckerInfoList(data)
    }

    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }

    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }

    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        CheckerInfoListReader::from_slice(slice).map(|reader| reader.to_entity())
    }

    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        CheckerInfoListReader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }

    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }

    fn as_builder(self) -> Self::Builder {
        Self::new_builder().extend(self.into_iter())
    }
}
#[derive(Clone, Copy)]
pub struct CheckerInfoListReader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for CheckerInfoListReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for CheckerInfoListReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for CheckerInfoListReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} [", Self::NAME)?;
        for i in 0..self.len() {
            if i == 0 {
                write!(f, "{}", self.get_unchecked(i))?;
            } else {
                write!(f, ", {}", self.get_unchecked(i))?;
            }
        }
        write!(f, "]")
    }
}
impl<'r> CheckerInfoListReader<'r> {
    pub const ITEM_SIZE: usize = 20;

    pub fn total_size(&self) -> usize {
        molecule::NUMBER_SIZE * (self.item_count() + 1)
    }

    pub fn item_count(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }

    pub fn len(&self) -> usize {
        self.item_count()
    }

    pub fn is_empty(&self) -> bool {
        self.len() == 0
    }

    pub fn get(&self, idx: usize) -> Option<PubKeyHashReader<'r>> {
        if idx >= self.len() {
            None
        } else {
            Some(self.get_unchecked(idx))
        }
    }

    pub fn get_unchecked(&self, idx: usize) -> PubKeyHashReader<'r> {
        let start = molecule::NUMBER_SIZE + Self::ITEM_SIZE * idx;
        let end = start + Self::ITEM_SIZE;
        PubKeyHashReader::new_unchecked(&self.as_slice()[start..end])
    }
}
impl<'r> molecule::prelude::Reader<'r> for CheckerInfoListReader<'r> {
    type Entity = CheckerInfoList;

    const NAME: &'static str = "CheckerInfoListReader";

    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().to_owned().into())
    }

    fn new_unchecked(slice: &'r [u8]) -> Self {
        CheckerInfoListReader(slice)
    }

    fn as_slice(&self) -> &'r [u8] {
        self.0
    }

    fn verify(slice: &[u8], _compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len < molecule::NUMBER_SIZE {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE, slice_len);
        }
        let item_count = molecule::unpack_number(slice) as usize;
        if item_count == 0 {
            if slice_len != molecule::NUMBER_SIZE {
                return ve!(Self, TotalSizeNotMatch, molecule::NUMBER_SIZE, slice_len);
            }
            return Ok(());
        }
        let total_size = molecule::NUMBER_SIZE + Self::ITEM_SIZE * item_count;
        if slice_len != total_size {
            return ve!(Self, TotalSizeNotMatch, total_size, slice_len);
        }
        Ok(())
    }
}
#[derive(Debug, Default)]
pub struct CheckerInfoListBuilder(pub(crate) Vec<PubKeyHash>);
impl CheckerInfoListBuilder {
    pub const ITEM_SIZE: usize = 20;

    pub fn set(mut self, v: Vec<PubKeyHash>) -> Self {
        self.0 = v;
        self
    }

    pub fn push(mut self, v: PubKeyHash) -> Self {
        self.0.push(v);
        self
    }

    pub fn extend<T: ::core::iter::IntoIterator<Item = PubKeyHash>>(mut self, iter: T) -> Self {
        for elem in iter {
            self.0.push(elem);
        }
        self
    }
}
impl molecule::prelude::Builder for CheckerInfoListBuilder {
    type Entity = CheckerInfoList;

    const NAME: &'static str = "CheckerInfoListBuilder";

    fn expected_length(&self) -> usize {
        molecule::NUMBER_SIZE + Self::ITEM_SIZE * self.0.len()
    }

    fn write<W: ::molecule::io::Write>(&self, writer: &mut W) -> ::molecule::io::Result<()> {
        writer.write_all(&molecule::pack_number(self.0.len() as molecule::Number))?;
        for inner in &self.0[..] {
            writer.write_all(inner.as_slice())?;
        }
        Ok(())
    }

    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        CheckerInfoList::new_unchecked(inner.into())
    }
}
pub struct CheckerInfoListIterator(CheckerInfoList, usize, usize);
impl ::core::iter::Iterator for CheckerInfoListIterator {
    type Item = PubKeyHash;

    fn next(&mut self) -> Option<Self::Item> {
        if self.1 >= self.2 {
            None
        } else {
            let ret = self.0.get_unchecked(self.1);
            self.1 += 1;
            Some(ret)
        }
    }
}
impl ::core::iter::ExactSizeIterator for CheckerInfoListIterator {
    fn len(&self) -> usize {
        self.2 - self.1
    }
}
impl ::core::iter::IntoIterator for CheckerInfoList {
    type IntoIter = CheckerInfoListIterator;
    type Item = PubKeyHash;

    fn into_iter(self) -> Self::IntoIter {
        let len = self.len();
        CheckerInfoListIterator(self, 0, len)
    }
}
impl<'r> CheckerInfoListReader<'r> {
    pub fn iter<'t>(&'t self) -> CheckerInfoListReaderIterator<'t, 'r> {
        CheckerInfoListReaderIterator(&self, 0, self.len())
    }
}
pub struct CheckerInfoListReaderIterator<'t, 'r>(&'t CheckerInfoListReader<'r>, usize, usize);
impl<'t: 'r, 'r> ::core::iter::Iterator for CheckerInfoListReaderIterator<'t, 'r> {
    type Item = PubKeyHashReader<'t>;

    fn next(&mut self) -> Option<Self::Item> {
        if self.1 >= self.2 {
            None
        } else {
            let ret = self.0.get_unchecked(self.1);
            self.1 += 1;
            Some(ret)
        }
    }
}
impl<'t: 'r, 'r> ::core::iter::ExactSizeIterator for CheckerInfoListReaderIterator<'t, 'r> {
    fn len(&self) -> usize {
        self.2 - self.1
    }
}
#[derive(Clone)]
pub struct SidechainConfigCell(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for SidechainConfigCell {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for SidechainConfigCell {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for SidechainConfigCell {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "sidechain_status", self.sidechain_status())?;
        write!(f, ", {}: {}", "commit_threshold", self.commit_threshold())?;
        write!(f, ", {}: {}", "challenge_threshold", self.challenge_threshold())?;
        write!(f, ", {}: {}", "checker_normal_count", self.checker_normal_count())?;
        write!(f, ", {}: {}", "checker_threshold", self.checker_threshold())?;
        write!(f, ", {}: {}", "checker_total_count", self.checker_total_count())?;
        write!(f, ", {}: {}", "activated_checkers", self.activated_checkers())?;
        write!(f, ", {}: {}", "jailed_checkers", self.jailed_checkers())?;
        write!(f, ", {}: {}", "refresh_punish_points", self.refresh_punish_points())?;
        write!(f, ", {}: {}", "refresh_punish_release_points", self.refresh_punish_release_points())?;
        write!(f, ", {}: {}", "refresh_punish_threshold", self.refresh_punish_threshold())?;
        write!(
            f,
            ", {}: {}",
            "refresh_sidechain_height_interval",
            self.refresh_sidechain_height_interval()
        )?;
        write!(f, ", {}: {}", "check_data_size_limit", self.check_data_size_limit())?;
        write!(f, ", {}: {}", "check_fee_rate", self.check_fee_rate())?;
        write!(f, ", {}: {}", "minimal_bond", self.minimal_bond())?;
        write!(f, ", {}: {}", "parallel_job_upper_bond", self.parallel_job_upper_bond())?;
        write!(
            f,
            ", {}: {}",
            "parallel_job_maximal_height_range",
            self.parallel_job_maximal_height_range()
        )?;
        write!(f, ", {}: {}", "admin_lock_arg", self.admin_lock_arg())?;
        write!(f, ", {}: {}", "collator_lock_arg", self.collator_lock_arg())?;
        write!(f, ", {}: {}", "bond_sudt_typescript_codehash", self.bond_sudt_typescript_codehash())?;
        write!(f, ", {}: {}", "bond_sudt_typescript_hashtype", self.bond_sudt_typescript_hashtype())?;
        let extra_count = self.count_extra_fields();
        if extra_count != 0 {
            write!(f, ", .. ({} fields)", extra_count)?;
        }
        write!(f, " }}")
    }
}
impl ::core::default::Default for SidechainConfigCell {
    fn default() -> Self {
        let v: Vec<u8> = vec![
            15, 1, 0, 0, 88, 0, 0, 0, 89, 0, 0, 0, 93, 0, 0, 0, 97, 0, 0, 0, 101, 0, 0, 0, 105, 0, 0, 0, 109, 0, 0, 0, 113, 0, 0, 0, 117,
            0, 0, 0, 121, 0, 0, 0, 125, 0, 0, 0, 129, 0, 0, 0, 145, 0, 0, 0, 161, 0, 0, 0, 165, 0, 0, 0, 181, 0, 0, 0, 182, 0, 0, 0, 198,
            0, 0, 0, 218, 0, 0, 0, 238, 0, 0, 0, 14, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        ];
        SidechainConfigCell::new_unchecked(v.into())
    }
}
impl SidechainConfigCell {
    pub const FIELD_COUNT: usize = 21;

    pub fn total_size(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }

    pub fn field_count(&self) -> usize {
        if self.total_size() == molecule::NUMBER_SIZE {
            0
        } else {
            (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1
        }
    }

    pub fn count_extra_fields(&self) -> usize {
        self.field_count() - Self::FIELD_COUNT
    }

    pub fn has_extra_fields(&self) -> bool {
        Self::FIELD_COUNT != self.field_count()
    }

    pub fn sidechain_status(&self) -> SidechainStatus {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[4..]) as usize;
        let end = molecule::unpack_number(&slice[8..]) as usize;
        SidechainStatus::new_unchecked(self.0.slice(start..end))
    }

    pub fn commit_threshold(&self) -> Uint32 {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[8..]) as usize;
        let end = molecule::unpack_number(&slice[12..]) as usize;
        Uint32::new_unchecked(self.0.slice(start..end))
    }

    pub fn challenge_threshold(&self) -> Uint32 {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[12..]) as usize;
        let end = molecule::unpack_number(&slice[16..]) as usize;
        Uint32::new_unchecked(self.0.slice(start..end))
    }

    pub fn checker_normal_count(&self) -> Uint32 {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[16..]) as usize;
        let end = molecule::unpack_number(&slice[20..]) as usize;
        Uint32::new_unchecked(self.0.slice(start..end))
    }

    pub fn checker_threshold(&self) -> Uint32 {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[20..]) as usize;
        let end = molecule::unpack_number(&slice[24..]) as usize;
        Uint32::new_unchecked(self.0.slice(start..end))
    }

    pub fn checker_total_count(&self) -> Uint32 {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[24..]) as usize;
        let end = molecule::unpack_number(&slice[28..]) as usize;
        Uint32::new_unchecked(self.0.slice(start..end))
    }

    pub fn activated_checkers(&self) -> CheckerInfoList {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[28..]) as usize;
        let end = molecule::unpack_number(&slice[32..]) as usize;
        CheckerInfoList::new_unchecked(self.0.slice(start..end))
    }

    pub fn jailed_checkers(&self) -> CheckerInfoList {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[32..]) as usize;
        let end = molecule::unpack_number(&slice[36..]) as usize;
        CheckerInfoList::new_unchecked(self.0.slice(start..end))
    }

    pub fn refresh_punish_points(&self) -> Uint32 {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[36..]) as usize;
        let end = molecule::unpack_number(&slice[40..]) as usize;
        Uint32::new_unchecked(self.0.slice(start..end))
    }

    pub fn refresh_punish_release_points(&self) -> Uint32 {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[40..]) as usize;
        let end = molecule::unpack_number(&slice[44..]) as usize;
        Uint32::new_unchecked(self.0.slice(start..end))
    }

    pub fn refresh_punish_threshold(&self) -> Uint32 {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[44..]) as usize;
        let end = molecule::unpack_number(&slice[48..]) as usize;
        Uint32::new_unchecked(self.0.slice(start..end))
    }

    pub fn refresh_sidechain_height_interval(&self) -> BlockHeight {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[48..]) as usize;
        let end = molecule::unpack_number(&slice[52..]) as usize;
        BlockHeight::new_unchecked(self.0.slice(start..end))
    }

    pub fn check_data_size_limit(&self) -> Uint128 {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[52..]) as usize;
        let end = molecule::unpack_number(&slice[56..]) as usize;
        Uint128::new_unchecked(self.0.slice(start..end))
    }

    pub fn check_fee_rate(&self) -> Uint32 {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[56..]) as usize;
        let end = molecule::unpack_number(&slice[60..]) as usize;
        Uint32::new_unchecked(self.0.slice(start..end))
    }

    pub fn minimal_bond(&self) -> Uint128 {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[60..]) as usize;
        let end = molecule::unpack_number(&slice[64..]) as usize;
        Uint128::new_unchecked(self.0.slice(start..end))
    }

    pub fn parallel_job_upper_bond(&self) -> Uint8 {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[64..]) as usize;
        let end = molecule::unpack_number(&slice[68..]) as usize;
        Uint8::new_unchecked(self.0.slice(start..end))
    }

    pub fn parallel_job_maximal_height_range(&self) -> BlockHeight {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[68..]) as usize;
        let end = molecule::unpack_number(&slice[72..]) as usize;
        BlockHeight::new_unchecked(self.0.slice(start..end))
    }

    pub fn admin_lock_arg(&self) -> PubKeyHash {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[72..]) as usize;
        let end = molecule::unpack_number(&slice[76..]) as usize;
        PubKeyHash::new_unchecked(self.0.slice(start..end))
    }

    pub fn collator_lock_arg(&self) -> PubKeyHash {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[76..]) as usize;
        let end = molecule::unpack_number(&slice[80..]) as usize;
        PubKeyHash::new_unchecked(self.0.slice(start..end))
    }

    pub fn bond_sudt_typescript_codehash(&self) -> CodeHash {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[80..]) as usize;
        let end = molecule::unpack_number(&slice[84..]) as usize;
        CodeHash::new_unchecked(self.0.slice(start..end))
    }

    pub fn bond_sudt_typescript_hashtype(&self) -> HashType {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[84..]) as usize;
        if self.has_extra_fields() {
            let end = molecule::unpack_number(&slice[88..]) as usize;
            HashType::new_unchecked(self.0.slice(start..end))
        } else {
            HashType::new_unchecked(self.0.slice(start..))
        }
    }

    pub fn as_reader<'r>(&'r self) -> SidechainConfigCellReader<'r> {
        SidechainConfigCellReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for SidechainConfigCell {
    type Builder = SidechainConfigCellBuilder;

    const NAME: &'static str = "SidechainConfigCell";

    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        SidechainConfigCell(data)
    }

    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }

    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }

    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        SidechainConfigCellReader::from_slice(slice).map(|reader| reader.to_entity())
    }

    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        SidechainConfigCellReader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }

    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }

    fn as_builder(self) -> Self::Builder {
        Self::new_builder()
            .sidechain_status(self.sidechain_status())
            .commit_threshold(self.commit_threshold())
            .challenge_threshold(self.challenge_threshold())
            .checker_normal_count(self.checker_normal_count())
            .checker_threshold(self.checker_threshold())
            .checker_total_count(self.checker_total_count())
            .activated_checkers(self.activated_checkers())
            .jailed_checkers(self.jailed_checkers())
            .refresh_punish_points(self.refresh_punish_points())
            .refresh_punish_release_points(self.refresh_punish_release_points())
            .refresh_punish_threshold(self.refresh_punish_threshold())
            .refresh_sidechain_height_interval(self.refresh_sidechain_height_interval())
            .check_data_size_limit(self.check_data_size_limit())
            .check_fee_rate(self.check_fee_rate())
            .minimal_bond(self.minimal_bond())
            .parallel_job_upper_bond(self.parallel_job_upper_bond())
            .parallel_job_maximal_height_range(self.parallel_job_maximal_height_range())
            .admin_lock_arg(self.admin_lock_arg())
            .collator_lock_arg(self.collator_lock_arg())
            .bond_sudt_typescript_codehash(self.bond_sudt_typescript_codehash())
            .bond_sudt_typescript_hashtype(self.bond_sudt_typescript_hashtype())
    }
}
#[derive(Clone, Copy)]
pub struct SidechainConfigCellReader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for SidechainConfigCellReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for SidechainConfigCellReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for SidechainConfigCellReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "sidechain_status", self.sidechain_status())?;
        write!(f, ", {}: {}", "commit_threshold", self.commit_threshold())?;
        write!(f, ", {}: {}", "challenge_threshold", self.challenge_threshold())?;
        write!(f, ", {}: {}", "checker_normal_count", self.checker_normal_count())?;
        write!(f, ", {}: {}", "checker_threshold", self.checker_threshold())?;
        write!(f, ", {}: {}", "checker_total_count", self.checker_total_count())?;
        write!(f, ", {}: {}", "activated_checkers", self.activated_checkers())?;
        write!(f, ", {}: {}", "jailed_checkers", self.jailed_checkers())?;
        write!(f, ", {}: {}", "refresh_punish_points", self.refresh_punish_points())?;
        write!(f, ", {}: {}", "refresh_punish_release_points", self.refresh_punish_release_points())?;
        write!(f, ", {}: {}", "refresh_punish_threshold", self.refresh_punish_threshold())?;
        write!(
            f,
            ", {}: {}",
            "refresh_sidechain_height_interval",
            self.refresh_sidechain_height_interval()
        )?;
        write!(f, ", {}: {}", "check_data_size_limit", self.check_data_size_limit())?;
        write!(f, ", {}: {}", "check_fee_rate", self.check_fee_rate())?;
        write!(f, ", {}: {}", "minimal_bond", self.minimal_bond())?;
        write!(f, ", {}: {}", "parallel_job_upper_bond", self.parallel_job_upper_bond())?;
        write!(
            f,
            ", {}: {}",
            "parallel_job_maximal_height_range",
            self.parallel_job_maximal_height_range()
        )?;
        write!(f, ", {}: {}", "admin_lock_arg", self.admin_lock_arg())?;
        write!(f, ", {}: {}", "collator_lock_arg", self.collator_lock_arg())?;
        write!(f, ", {}: {}", "bond_sudt_typescript_codehash", self.bond_sudt_typescript_codehash())?;
        write!(f, ", {}: {}", "bond_sudt_typescript_hashtype", self.bond_sudt_typescript_hashtype())?;
        let extra_count = self.count_extra_fields();
        if extra_count != 0 {
            write!(f, ", .. ({} fields)", extra_count)?;
        }
        write!(f, " }}")
    }
}
impl<'r> SidechainConfigCellReader<'r> {
    pub const FIELD_COUNT: usize = 21;

    pub fn total_size(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }

    pub fn field_count(&self) -> usize {
        if self.total_size() == molecule::NUMBER_SIZE {
            0
        } else {
            (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1
        }
    }

    pub fn count_extra_fields(&self) -> usize {
        self.field_count() - Self::FIELD_COUNT
    }

    pub fn has_extra_fields(&self) -> bool {
        Self::FIELD_COUNT != self.field_count()
    }

    pub fn sidechain_status(&self) -> SidechainStatusReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[4..]) as usize;
        let end = molecule::unpack_number(&slice[8..]) as usize;
        SidechainStatusReader::new_unchecked(&self.as_slice()[start..end])
    }

    pub fn commit_threshold(&self) -> Uint32Reader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[8..]) as usize;
        let end = molecule::unpack_number(&slice[12..]) as usize;
        Uint32Reader::new_unchecked(&self.as_slice()[start..end])
    }

    pub fn challenge_threshold(&self) -> Uint32Reader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[12..]) as usize;
        let end = molecule::unpack_number(&slice[16..]) as usize;
        Uint32Reader::new_unchecked(&self.as_slice()[start..end])
    }

    pub fn checker_normal_count(&self) -> Uint32Reader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[16..]) as usize;
        let end = molecule::unpack_number(&slice[20..]) as usize;
        Uint32Reader::new_unchecked(&self.as_slice()[start..end])
    }

    pub fn checker_threshold(&self) -> Uint32Reader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[20..]) as usize;
        let end = molecule::unpack_number(&slice[24..]) as usize;
        Uint32Reader::new_unchecked(&self.as_slice()[start..end])
    }

    pub fn checker_total_count(&self) -> Uint32Reader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[24..]) as usize;
        let end = molecule::unpack_number(&slice[28..]) as usize;
        Uint32Reader::new_unchecked(&self.as_slice()[start..end])
    }

    pub fn activated_checkers(&self) -> CheckerInfoListReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[28..]) as usize;
        let end = molecule::unpack_number(&slice[32..]) as usize;
        CheckerInfoListReader::new_unchecked(&self.as_slice()[start..end])
    }

    pub fn jailed_checkers(&self) -> CheckerInfoListReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[32..]) as usize;
        let end = molecule::unpack_number(&slice[36..]) as usize;
        CheckerInfoListReader::new_unchecked(&self.as_slice()[start..end])
    }

    pub fn refresh_punish_points(&self) -> Uint32Reader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[36..]) as usize;
        let end = molecule::unpack_number(&slice[40..]) as usize;
        Uint32Reader::new_unchecked(&self.as_slice()[start..end])
    }

    pub fn refresh_punish_release_points(&self) -> Uint32Reader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[40..]) as usize;
        let end = molecule::unpack_number(&slice[44..]) as usize;
        Uint32Reader::new_unchecked(&self.as_slice()[start..end])
    }

    pub fn refresh_punish_threshold(&self) -> Uint32Reader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[44..]) as usize;
        let end = molecule::unpack_number(&slice[48..]) as usize;
        Uint32Reader::new_unchecked(&self.as_slice()[start..end])
    }

    pub fn refresh_sidechain_height_interval(&self) -> BlockHeightReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[48..]) as usize;
        let end = molecule::unpack_number(&slice[52..]) as usize;
        BlockHeightReader::new_unchecked(&self.as_slice()[start..end])
    }

    pub fn check_data_size_limit(&self) -> Uint128Reader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[52..]) as usize;
        let end = molecule::unpack_number(&slice[56..]) as usize;
        Uint128Reader::new_unchecked(&self.as_slice()[start..end])
    }

    pub fn check_fee_rate(&self) -> Uint32Reader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[56..]) as usize;
        let end = molecule::unpack_number(&slice[60..]) as usize;
        Uint32Reader::new_unchecked(&self.as_slice()[start..end])
    }

    pub fn minimal_bond(&self) -> Uint128Reader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[60..]) as usize;
        let end = molecule::unpack_number(&slice[64..]) as usize;
        Uint128Reader::new_unchecked(&self.as_slice()[start..end])
    }

    pub fn parallel_job_upper_bond(&self) -> Uint8Reader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[64..]) as usize;
        let end = molecule::unpack_number(&slice[68..]) as usize;
        Uint8Reader::new_unchecked(&self.as_slice()[start..end])
    }

    pub fn parallel_job_maximal_height_range(&self) -> BlockHeightReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[68..]) as usize;
        let end = molecule::unpack_number(&slice[72..]) as usize;
        BlockHeightReader::new_unchecked(&self.as_slice()[start..end])
    }

    pub fn admin_lock_arg(&self) -> PubKeyHashReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[72..]) as usize;
        let end = molecule::unpack_number(&slice[76..]) as usize;
        PubKeyHashReader::new_unchecked(&self.as_slice()[start..end])
    }

    pub fn collator_lock_arg(&self) -> PubKeyHashReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[76..]) as usize;
        let end = molecule::unpack_number(&slice[80..]) as usize;
        PubKeyHashReader::new_unchecked(&self.as_slice()[start..end])
    }

    pub fn bond_sudt_typescript_codehash(&self) -> CodeHashReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[80..]) as usize;
        let end = molecule::unpack_number(&slice[84..]) as usize;
        CodeHashReader::new_unchecked(&self.as_slice()[start..end])
    }

    pub fn bond_sudt_typescript_hashtype(&self) -> HashTypeReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[84..]) as usize;
        if self.has_extra_fields() {
            let end = molecule::unpack_number(&slice[88..]) as usize;
            HashTypeReader::new_unchecked(&self.as_slice()[start..end])
        } else {
            HashTypeReader::new_unchecked(&self.as_slice()[start..])
        }
    }
}
impl<'r> molecule::prelude::Reader<'r> for SidechainConfigCellReader<'r> {
    type Entity = SidechainConfigCell;

    const NAME: &'static str = "SidechainConfigCellReader";

    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().to_owned().into())
    }

    fn new_unchecked(slice: &'r [u8]) -> Self {
        SidechainConfigCellReader(slice)
    }

    fn as_slice(&self) -> &'r [u8] {
        self.0
    }

    fn verify(slice: &[u8], compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len < molecule::NUMBER_SIZE {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE, slice_len);
        }
        let total_size = molecule::unpack_number(slice) as usize;
        if slice_len != total_size {
            return ve!(Self, TotalSizeNotMatch, total_size, slice_len);
        }
        if slice_len == molecule::NUMBER_SIZE && Self::FIELD_COUNT == 0 {
            return Ok(());
        }
        if slice_len < molecule::NUMBER_SIZE * 2 {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE * 2, slice_len);
        }
        let offset_first = molecule::unpack_number(&slice[molecule::NUMBER_SIZE..]) as usize;
        if offset_first % molecule::NUMBER_SIZE != 0 || offset_first < molecule::NUMBER_SIZE * 2 {
            return ve!(Self, OffsetsNotMatch);
        }
        if slice_len < offset_first {
            return ve!(Self, HeaderIsBroken, offset_first, slice_len);
        }
        let field_count = offset_first / molecule::NUMBER_SIZE - 1;
        if field_count < Self::FIELD_COUNT {
            return ve!(Self, FieldCountNotMatch, Self::FIELD_COUNT, field_count);
        } else if !compatible && field_count > Self::FIELD_COUNT {
            return ve!(Self, FieldCountNotMatch, Self::FIELD_COUNT, field_count);
        };
        let mut offsets: Vec<usize> = slice[molecule::NUMBER_SIZE..offset_first]
            .chunks_exact(molecule::NUMBER_SIZE)
            .map(|x| molecule::unpack_number(x) as usize)
            .collect();
        offsets.push(total_size);
        if offsets.windows(2).any(|i| i[0] > i[1]) {
            return ve!(Self, OffsetsNotMatch);
        }
        SidechainStatusReader::verify(&slice[offsets[0]..offsets[1]], compatible)?;
        Uint32Reader::verify(&slice[offsets[1]..offsets[2]], compatible)?;
        Uint32Reader::verify(&slice[offsets[2]..offsets[3]], compatible)?;
        Uint32Reader::verify(&slice[offsets[3]..offsets[4]], compatible)?;
        Uint32Reader::verify(&slice[offsets[4]..offsets[5]], compatible)?;
        Uint32Reader::verify(&slice[offsets[5]..offsets[6]], compatible)?;
        CheckerInfoListReader::verify(&slice[offsets[6]..offsets[7]], compatible)?;
        CheckerInfoListReader::verify(&slice[offsets[7]..offsets[8]], compatible)?;
        Uint32Reader::verify(&slice[offsets[8]..offsets[9]], compatible)?;
        Uint32Reader::verify(&slice[offsets[9]..offsets[10]], compatible)?;
        Uint32Reader::verify(&slice[offsets[10]..offsets[11]], compatible)?;
        BlockHeightReader::verify(&slice[offsets[11]..offsets[12]], compatible)?;
        Uint128Reader::verify(&slice[offsets[12]..offsets[13]], compatible)?;
        Uint32Reader::verify(&slice[offsets[13]..offsets[14]], compatible)?;
        Uint128Reader::verify(&slice[offsets[14]..offsets[15]], compatible)?;
        Uint8Reader::verify(&slice[offsets[15]..offsets[16]], compatible)?;
        BlockHeightReader::verify(&slice[offsets[16]..offsets[17]], compatible)?;
        PubKeyHashReader::verify(&slice[offsets[17]..offsets[18]], compatible)?;
        PubKeyHashReader::verify(&slice[offsets[18]..offsets[19]], compatible)?;
        CodeHashReader::verify(&slice[offsets[19]..offsets[20]], compatible)?;
        HashTypeReader::verify(&slice[offsets[20]..offsets[21]], compatible)?;
        Ok(())
    }
}
#[derive(Debug, Default)]
pub struct SidechainConfigCellBuilder {
    pub(crate) sidechain_status: SidechainStatus,
    pub(crate) commit_threshold: Uint32,
    pub(crate) challenge_threshold: Uint32,
    pub(crate) checker_normal_count: Uint32,
    pub(crate) checker_threshold: Uint32,
    pub(crate) checker_total_count: Uint32,
    pub(crate) activated_checkers: CheckerInfoList,
    pub(crate) jailed_checkers: CheckerInfoList,
    pub(crate) refresh_punish_points: Uint32,
    pub(crate) refresh_punish_release_points: Uint32,
    pub(crate) refresh_punish_threshold: Uint32,
    pub(crate) refresh_sidechain_height_interval: BlockHeight,
    pub(crate) check_data_size_limit: Uint128,
    pub(crate) check_fee_rate: Uint32,
    pub(crate) minimal_bond: Uint128,
    pub(crate) parallel_job_upper_bond: Uint8,
    pub(crate) parallel_job_maximal_height_range: BlockHeight,
    pub(crate) admin_lock_arg: PubKeyHash,
    pub(crate) collator_lock_arg: PubKeyHash,
    pub(crate) bond_sudt_typescript_codehash: CodeHash,
    pub(crate) bond_sudt_typescript_hashtype: HashType,
}
impl SidechainConfigCellBuilder {
    pub const FIELD_COUNT: usize = 21;

    pub fn sidechain_status(mut self, v: SidechainStatus) -> Self {
        self.sidechain_status = v;
        self
    }

    pub fn commit_threshold(mut self, v: Uint32) -> Self {
        self.commit_threshold = v;
        self
    }

    pub fn challenge_threshold(mut self, v: Uint32) -> Self {
        self.challenge_threshold = v;
        self
    }

    pub fn checker_normal_count(mut self, v: Uint32) -> Self {
        self.checker_normal_count = v;
        self
    }

    pub fn checker_threshold(mut self, v: Uint32) -> Self {
        self.checker_threshold = v;
        self
    }

    pub fn checker_total_count(mut self, v: Uint32) -> Self {
        self.checker_total_count = v;
        self
    }

    pub fn activated_checkers(mut self, v: CheckerInfoList) -> Self {
        self.activated_checkers = v;
        self
    }

    pub fn jailed_checkers(mut self, v: CheckerInfoList) -> Self {
        self.jailed_checkers = v;
        self
    }

    pub fn refresh_punish_points(mut self, v: Uint32) -> Self {
        self.refresh_punish_points = v;
        self
    }

    pub fn refresh_punish_release_points(mut self, v: Uint32) -> Self {
        self.refresh_punish_release_points = v;
        self
    }

    pub fn refresh_punish_threshold(mut self, v: Uint32) -> Self {
        self.refresh_punish_threshold = v;
        self
    }

    pub fn refresh_sidechain_height_interval(mut self, v: BlockHeight) -> Self {
        self.refresh_sidechain_height_interval = v;
        self
    }

    pub fn check_data_size_limit(mut self, v: Uint128) -> Self {
        self.check_data_size_limit = v;
        self
    }

    pub fn check_fee_rate(mut self, v: Uint32) -> Self {
        self.check_fee_rate = v;
        self
    }

    pub fn minimal_bond(mut self, v: Uint128) -> Self {
        self.minimal_bond = v;
        self
    }

    pub fn parallel_job_upper_bond(mut self, v: Uint8) -> Self {
        self.parallel_job_upper_bond = v;
        self
    }

    pub fn parallel_job_maximal_height_range(mut self, v: BlockHeight) -> Self {
        self.parallel_job_maximal_height_range = v;
        self
    }

    pub fn admin_lock_arg(mut self, v: PubKeyHash) -> Self {
        self.admin_lock_arg = v;
        self
    }

    pub fn collator_lock_arg(mut self, v: PubKeyHash) -> Self {
        self.collator_lock_arg = v;
        self
    }

    pub fn bond_sudt_typescript_codehash(mut self, v: CodeHash) -> Self {
        self.bond_sudt_typescript_codehash = v;
        self
    }

    pub fn bond_sudt_typescript_hashtype(mut self, v: HashType) -> Self {
        self.bond_sudt_typescript_hashtype = v;
        self
    }
}
impl molecule::prelude::Builder for SidechainConfigCellBuilder {
    type Entity = SidechainConfigCell;

    const NAME: &'static str = "SidechainConfigCellBuilder";

    fn expected_length(&self) -> usize {
        molecule::NUMBER_SIZE * (Self::FIELD_COUNT + 1)
            + self.sidechain_status.as_slice().len()
            + self.commit_threshold.as_slice().len()
            + self.challenge_threshold.as_slice().len()
            + self.checker_normal_count.as_slice().len()
            + self.checker_threshold.as_slice().len()
            + self.checker_total_count.as_slice().len()
            + self.activated_checkers.as_slice().len()
            + self.jailed_checkers.as_slice().len()
            + self.refresh_punish_points.as_slice().len()
            + self.refresh_punish_release_points.as_slice().len()
            + self.refresh_punish_threshold.as_slice().len()
            + self.refresh_sidechain_height_interval.as_slice().len()
            + self.check_data_size_limit.as_slice().len()
            + self.check_fee_rate.as_slice().len()
            + self.minimal_bond.as_slice().len()
            + self.parallel_job_upper_bond.as_slice().len()
            + self.parallel_job_maximal_height_range.as_slice().len()
            + self.admin_lock_arg.as_slice().len()
            + self.collator_lock_arg.as_slice().len()
            + self.bond_sudt_typescript_codehash.as_slice().len()
            + self.bond_sudt_typescript_hashtype.as_slice().len()
    }

    fn write<W: ::molecule::io::Write>(&self, writer: &mut W) -> ::molecule::io::Result<()> {
        let mut total_size = molecule::NUMBER_SIZE * (Self::FIELD_COUNT + 1);
        let mut offsets = Vec::with_capacity(Self::FIELD_COUNT);
        offsets.push(total_size);
        total_size += self.sidechain_status.as_slice().len();
        offsets.push(total_size);
        total_size += self.commit_threshold.as_slice().len();
        offsets.push(total_size);
        total_size += self.challenge_threshold.as_slice().len();
        offsets.push(total_size);
        total_size += self.checker_normal_count.as_slice().len();
        offsets.push(total_size);
        total_size += self.checker_threshold.as_slice().len();
        offsets.push(total_size);
        total_size += self.checker_total_count.as_slice().len();
        offsets.push(total_size);
        total_size += self.activated_checkers.as_slice().len();
        offsets.push(total_size);
        total_size += self.jailed_checkers.as_slice().len();
        offsets.push(total_size);
        total_size += self.refresh_punish_points.as_slice().len();
        offsets.push(total_size);
        total_size += self.refresh_punish_release_points.as_slice().len();
        offsets.push(total_size);
        total_size += self.refresh_punish_threshold.as_slice().len();
        offsets.push(total_size);
        total_size += self.refresh_sidechain_height_interval.as_slice().len();
        offsets.push(total_size);
        total_size += self.check_data_size_limit.as_slice().len();
        offsets.push(total_size);
        total_size += self.check_fee_rate.as_slice().len();
        offsets.push(total_size);
        total_size += self.minimal_bond.as_slice().len();
        offsets.push(total_size);
        total_size += self.parallel_job_upper_bond.as_slice().len();
        offsets.push(total_size);
        total_size += self.parallel_job_maximal_height_range.as_slice().len();
        offsets.push(total_size);
        total_size += self.admin_lock_arg.as_slice().len();
        offsets.push(total_size);
        total_size += self.collator_lock_arg.as_slice().len();
        offsets.push(total_size);
        total_size += self.bond_sudt_typescript_codehash.as_slice().len();
        offsets.push(total_size);
        total_size += self.bond_sudt_typescript_hashtype.as_slice().len();
        writer.write_all(&molecule::pack_number(total_size as molecule::Number))?;
        for offset in offsets.into_iter() {
            writer.write_all(&molecule::pack_number(offset as molecule::Number))?;
        }
        writer.write_all(self.sidechain_status.as_slice())?;
        writer.write_all(self.commit_threshold.as_slice())?;
        writer.write_all(self.challenge_threshold.as_slice())?;
        writer.write_all(self.checker_normal_count.as_slice())?;
        writer.write_all(self.checker_threshold.as_slice())?;
        writer.write_all(self.checker_total_count.as_slice())?;
        writer.write_all(self.activated_checkers.as_slice())?;
        writer.write_all(self.jailed_checkers.as_slice())?;
        writer.write_all(self.refresh_punish_points.as_slice())?;
        writer.write_all(self.refresh_punish_release_points.as_slice())?;
        writer.write_all(self.refresh_punish_threshold.as_slice())?;
        writer.write_all(self.refresh_sidechain_height_interval.as_slice())?;
        writer.write_all(self.check_data_size_limit.as_slice())?;
        writer.write_all(self.check_fee_rate.as_slice())?;
        writer.write_all(self.minimal_bond.as_slice())?;
        writer.write_all(self.parallel_job_upper_bond.as_slice())?;
        writer.write_all(self.parallel_job_maximal_height_range.as_slice())?;
        writer.write_all(self.admin_lock_arg.as_slice())?;
        writer.write_all(self.collator_lock_arg.as_slice())?;
        writer.write_all(self.bond_sudt_typescript_codehash.as_slice())?;
        writer.write_all(self.bond_sudt_typescript_hashtype.as_slice())?;
        Ok(())
    }

    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        SidechainConfigCell::new_unchecked(inner.into())
    }
}
#[derive(Clone)]
pub struct SidechainConfigCellTypeArgs(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for SidechainConfigCellTypeArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for SidechainConfigCellTypeArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for SidechainConfigCellTypeArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "chain_id", self.chain_id())?;
        write!(f, " }}")
    }
}
impl ::core::default::Default for SidechainConfigCellTypeArgs {
    fn default() -> Self {
        let v: Vec<u8> = vec![0, 0, 0, 0];
        SidechainConfigCellTypeArgs::new_unchecked(v.into())
    }
}
impl SidechainConfigCellTypeArgs {
    pub const FIELD_COUNT: usize = 1;
    pub const FIELD_SIZES: [usize; 1] = [4];
    pub const TOTAL_SIZE: usize = 4;

    pub fn chain_id(&self) -> ChainId {
        ChainId::new_unchecked(self.0.slice(0..4))
    }

    pub fn as_reader<'r>(&'r self) -> SidechainConfigCellTypeArgsReader<'r> {
        SidechainConfigCellTypeArgsReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for SidechainConfigCellTypeArgs {
    type Builder = SidechainConfigCellTypeArgsBuilder;

    const NAME: &'static str = "SidechainConfigCellTypeArgs";

    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        SidechainConfigCellTypeArgs(data)
    }

    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }

    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }

    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        SidechainConfigCellTypeArgsReader::from_slice(slice).map(|reader| reader.to_entity())
    }

    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        SidechainConfigCellTypeArgsReader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }

    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }

    fn as_builder(self) -> Self::Builder {
        Self::new_builder().chain_id(self.chain_id())
    }
}
#[derive(Clone, Copy)]
pub struct SidechainConfigCellTypeArgsReader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for SidechainConfigCellTypeArgsReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for SidechainConfigCellTypeArgsReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for SidechainConfigCellTypeArgsReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "chain_id", self.chain_id())?;
        write!(f, " }}")
    }
}
impl<'r> SidechainConfigCellTypeArgsReader<'r> {
    pub const FIELD_COUNT: usize = 1;
    pub const FIELD_SIZES: [usize; 1] = [4];
    pub const TOTAL_SIZE: usize = 4;

    pub fn chain_id(&self) -> ChainIdReader<'r> {
        ChainIdReader::new_unchecked(&self.as_slice()[0..4])
    }
}
impl<'r> molecule::prelude::Reader<'r> for SidechainConfigCellTypeArgsReader<'r> {
    type Entity = SidechainConfigCellTypeArgs;

    const NAME: &'static str = "SidechainConfigCellTypeArgsReader";

    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().to_owned().into())
    }

    fn new_unchecked(slice: &'r [u8]) -> Self {
        SidechainConfigCellTypeArgsReader(slice)
    }

    fn as_slice(&self) -> &'r [u8] {
        self.0
    }

    fn verify(slice: &[u8], _compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len != Self::TOTAL_SIZE {
            return ve!(Self, TotalSizeNotMatch, Self::TOTAL_SIZE, slice_len);
        }
        Ok(())
    }
}
#[derive(Debug, Default)]
pub struct SidechainConfigCellTypeArgsBuilder {
    pub(crate) chain_id: ChainId,
}
impl SidechainConfigCellTypeArgsBuilder {
    pub const FIELD_COUNT: usize = 1;
    pub const FIELD_SIZES: [usize; 1] = [4];
    pub const TOTAL_SIZE: usize = 4;

    pub fn chain_id(mut self, v: ChainId) -> Self {
        self.chain_id = v;
        self
    }
}
impl molecule::prelude::Builder for SidechainConfigCellTypeArgsBuilder {
    type Entity = SidechainConfigCellTypeArgs;

    const NAME: &'static str = "SidechainConfigCellTypeArgsBuilder";

    fn expected_length(&self) -> usize {
        Self::TOTAL_SIZE
    }

    fn write<W: ::molecule::io::Write>(&self, writer: &mut W) -> ::molecule::io::Result<()> {
        writer.write_all(self.chain_id.as_slice())?;
        Ok(())
    }

    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        SidechainConfigCellTypeArgs::new_unchecked(inner.into())
    }
}
