// Generated by Molecule 0.7.2

use super::super::common::*;
use molecule::prelude::*;
#[derive(Clone)]
pub struct CheckerInfoStatus(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for CheckerInfoStatus {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for CheckerInfoStatus {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for CheckerInfoStatus {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        let raw_data = hex_string(&self.raw_data());
        write!(f, "{}(0x{})", Self::NAME, raw_data)
    }
}
impl ::core::default::Default for CheckerInfoStatus {
    fn default() -> Self {
        let v: Vec<u8> = vec![0];
        CheckerInfoStatus::new_unchecked(v.into())
    }
}
impl CheckerInfoStatus {
    pub const ITEM_COUNT: usize = 1;
    pub const ITEM_SIZE: usize = 1;
    pub const TOTAL_SIZE: usize = 1;

    pub fn nth0(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(0..1))
    }

    pub fn raw_data(&self) -> molecule::bytes::Bytes {
        self.as_bytes()
    }

    pub fn as_reader<'r>(&'r self) -> CheckerInfoStatusReader<'r> {
        CheckerInfoStatusReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for CheckerInfoStatus {
    type Builder = CheckerInfoStatusBuilder;

    const NAME: &'static str = "CheckerInfoStatus";

    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        CheckerInfoStatus(data)
    }

    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }

    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }

    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        CheckerInfoStatusReader::from_slice(slice).map(|reader| reader.to_entity())
    }

    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        CheckerInfoStatusReader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }

    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }

    fn as_builder(self) -> Self::Builder {
        Self::new_builder().set([self.nth0()])
    }
}
#[derive(Clone, Copy)]
pub struct CheckerInfoStatusReader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for CheckerInfoStatusReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for CheckerInfoStatusReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for CheckerInfoStatusReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        let raw_data = hex_string(&self.raw_data());
        write!(f, "{}(0x{})", Self::NAME, raw_data)
    }
}
impl<'r> CheckerInfoStatusReader<'r> {
    pub const ITEM_COUNT: usize = 1;
    pub const ITEM_SIZE: usize = 1;
    pub const TOTAL_SIZE: usize = 1;

    pub fn nth0(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[0..1])
    }

    pub fn raw_data(&self) -> &'r [u8] {
        self.as_slice()
    }
}
impl<'r> molecule::prelude::Reader<'r> for CheckerInfoStatusReader<'r> {
    type Entity = CheckerInfoStatus;

    const NAME: &'static str = "CheckerInfoStatusReader";

    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().to_owned().into())
    }

    fn new_unchecked(slice: &'r [u8]) -> Self {
        CheckerInfoStatusReader(slice)
    }

    fn as_slice(&self) -> &'r [u8] {
        self.0
    }

    fn verify(slice: &[u8], _compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len != Self::TOTAL_SIZE {
            return ve!(Self, TotalSizeNotMatch, Self::TOTAL_SIZE, slice_len);
        }
        Ok(())
    }
}
pub struct CheckerInfoStatusBuilder(pub(crate) [Byte; 1]);
impl ::core::fmt::Debug for CheckerInfoStatusBuilder {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:?})", Self::NAME, &self.0[..])
    }
}
impl ::core::default::Default for CheckerInfoStatusBuilder {
    fn default() -> Self {
        CheckerInfoStatusBuilder([Byte::default()])
    }
}
impl CheckerInfoStatusBuilder {
    pub const ITEM_COUNT: usize = 1;
    pub const ITEM_SIZE: usize = 1;
    pub const TOTAL_SIZE: usize = 1;

    pub fn set(mut self, v: [Byte; 1]) -> Self {
        self.0 = v;
        self
    }

    pub fn nth0(mut self, v: Byte) -> Self {
        self.0[0] = v;
        self
    }
}
impl molecule::prelude::Builder for CheckerInfoStatusBuilder {
    type Entity = CheckerInfoStatus;

    const NAME: &'static str = "CheckerInfoStatusBuilder";

    fn expected_length(&self) -> usize {
        Self::TOTAL_SIZE
    }

    fn write<W: molecule::io::Write>(&self, writer: &mut W) -> molecule::io::Result<()> {
        writer.write_all(self.0[0].as_slice())?;
        Ok(())
    }

    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        CheckerInfoStatus::new_unchecked(inner.into())
    }
}
#[derive(Clone)]
pub struct CheckerInfoCell(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for CheckerInfoCell {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for CheckerInfoCell {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for CheckerInfoCell {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "unpaid_fee", self.unpaid_fee())?;
        write!(f, ", {}: {}", "uppaid_check_data_size", self.uppaid_check_data_size())?;
        write!(f, ", {}: {}", "status", self.status())?;
        write!(f, ", {}: {}", "rpc_url", self.rpc_url())?;
        let extra_count = self.count_extra_fields();
        if extra_count != 0 {
            write!(f, ", .. ({} fields)", extra_count)?;
        }
        write!(f, " }}")
    }
}
impl ::core::default::Default for CheckerInfoCell {
    fn default() -> Self {
        let v: Vec<u8> = vec![
            57, 0, 0, 0, 20, 0, 0, 0, 36, 0, 0, 0, 52, 0, 0, 0, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        ];
        CheckerInfoCell::new_unchecked(v.into())
    }
}
impl CheckerInfoCell {
    pub const FIELD_COUNT: usize = 4;

    pub fn total_size(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }

    pub fn field_count(&self) -> usize {
        if self.total_size() == molecule::NUMBER_SIZE {
            0
        } else {
            (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1
        }
    }

    pub fn count_extra_fields(&self) -> usize {
        self.field_count() - Self::FIELD_COUNT
    }

    pub fn has_extra_fields(&self) -> bool {
        Self::FIELD_COUNT != self.field_count()
    }

    pub fn unpaid_fee(&self) -> Uint128 {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[4..]) as usize;
        let end = molecule::unpack_number(&slice[8..]) as usize;
        Uint128::new_unchecked(self.0.slice(start..end))
    }

    pub fn uppaid_check_data_size(&self) -> Uint128 {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[8..]) as usize;
        let end = molecule::unpack_number(&slice[12..]) as usize;
        Uint128::new_unchecked(self.0.slice(start..end))
    }

    pub fn status(&self) -> CheckerInfoStatus {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[12..]) as usize;
        let end = molecule::unpack_number(&slice[16..]) as usize;
        CheckerInfoStatus::new_unchecked(self.0.slice(start..end))
    }

    pub fn rpc_url(&self) -> String {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[16..]) as usize;
        if self.has_extra_fields() {
            let end = molecule::unpack_number(&slice[20..]) as usize;
            String::new_unchecked(self.0.slice(start..end))
        } else {
            String::new_unchecked(self.0.slice(start..))
        }
    }

    pub fn as_reader<'r>(&'r self) -> CheckerInfoCellReader<'r> {
        CheckerInfoCellReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for CheckerInfoCell {
    type Builder = CheckerInfoCellBuilder;

    const NAME: &'static str = "CheckerInfoCell";

    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        CheckerInfoCell(data)
    }

    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }

    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }

    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        CheckerInfoCellReader::from_slice(slice).map(|reader| reader.to_entity())
    }

    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        CheckerInfoCellReader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }

    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }

    fn as_builder(self) -> Self::Builder {
        Self::new_builder()
            .unpaid_fee(self.unpaid_fee())
            .uppaid_check_data_size(self.uppaid_check_data_size())
            .status(self.status())
            .rpc_url(self.rpc_url())
    }
}
#[derive(Clone, Copy)]
pub struct CheckerInfoCellReader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for CheckerInfoCellReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for CheckerInfoCellReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for CheckerInfoCellReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "unpaid_fee", self.unpaid_fee())?;
        write!(f, ", {}: {}", "uppaid_check_data_size", self.uppaid_check_data_size())?;
        write!(f, ", {}: {}", "status", self.status())?;
        write!(f, ", {}: {}", "rpc_url", self.rpc_url())?;
        let extra_count = self.count_extra_fields();
        if extra_count != 0 {
            write!(f, ", .. ({} fields)", extra_count)?;
        }
        write!(f, " }}")
    }
}
impl<'r> CheckerInfoCellReader<'r> {
    pub const FIELD_COUNT: usize = 4;

    pub fn total_size(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }

    pub fn field_count(&self) -> usize {
        if self.total_size() == molecule::NUMBER_SIZE {
            0
        } else {
            (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1
        }
    }

    pub fn count_extra_fields(&self) -> usize {
        self.field_count() - Self::FIELD_COUNT
    }

    pub fn has_extra_fields(&self) -> bool {
        Self::FIELD_COUNT != self.field_count()
    }

    pub fn unpaid_fee(&self) -> Uint128Reader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[4..]) as usize;
        let end = molecule::unpack_number(&slice[8..]) as usize;
        Uint128Reader::new_unchecked(&self.as_slice()[start..end])
    }

    pub fn uppaid_check_data_size(&self) -> Uint128Reader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[8..]) as usize;
        let end = molecule::unpack_number(&slice[12..]) as usize;
        Uint128Reader::new_unchecked(&self.as_slice()[start..end])
    }

    pub fn status(&self) -> CheckerInfoStatusReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[12..]) as usize;
        let end = molecule::unpack_number(&slice[16..]) as usize;
        CheckerInfoStatusReader::new_unchecked(&self.as_slice()[start..end])
    }

    pub fn rpc_url(&self) -> StringReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[16..]) as usize;
        if self.has_extra_fields() {
            let end = molecule::unpack_number(&slice[20..]) as usize;
            StringReader::new_unchecked(&self.as_slice()[start..end])
        } else {
            StringReader::new_unchecked(&self.as_slice()[start..])
        }
    }
}
impl<'r> molecule::prelude::Reader<'r> for CheckerInfoCellReader<'r> {
    type Entity = CheckerInfoCell;

    const NAME: &'static str = "CheckerInfoCellReader";

    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().to_owned().into())
    }

    fn new_unchecked(slice: &'r [u8]) -> Self {
        CheckerInfoCellReader(slice)
    }

    fn as_slice(&self) -> &'r [u8] {
        self.0
    }

    fn verify(slice: &[u8], compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len < molecule::NUMBER_SIZE {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE, slice_len);
        }
        let total_size = molecule::unpack_number(slice) as usize;
        if slice_len != total_size {
            return ve!(Self, TotalSizeNotMatch, total_size, slice_len);
        }
        if slice_len == molecule::NUMBER_SIZE && Self::FIELD_COUNT == 0 {
            return Ok(());
        }
        if slice_len < molecule::NUMBER_SIZE * 2 {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE * 2, slice_len);
        }
        let offset_first = molecule::unpack_number(&slice[molecule::NUMBER_SIZE..]) as usize;
        if offset_first % molecule::NUMBER_SIZE != 0 || offset_first < molecule::NUMBER_SIZE * 2 {
            return ve!(Self, OffsetsNotMatch);
        }
        if slice_len < offset_first {
            return ve!(Self, HeaderIsBroken, offset_first, slice_len);
        }
        let field_count = offset_first / molecule::NUMBER_SIZE - 1;
        if field_count < Self::FIELD_COUNT {
            return ve!(Self, FieldCountNotMatch, Self::FIELD_COUNT, field_count);
        } else if !compatible && field_count > Self::FIELD_COUNT {
            return ve!(Self, FieldCountNotMatch, Self::FIELD_COUNT, field_count);
        };
        let mut offsets: Vec<usize> = slice[molecule::NUMBER_SIZE..offset_first]
            .chunks_exact(molecule::NUMBER_SIZE)
            .map(|x| molecule::unpack_number(x) as usize)
            .collect();
        offsets.push(total_size);
        if offsets.windows(2).any(|i| i[0] > i[1]) {
            return ve!(Self, OffsetsNotMatch);
        }
        Uint128Reader::verify(&slice[offsets[0]..offsets[1]], compatible)?;
        Uint128Reader::verify(&slice[offsets[1]..offsets[2]], compatible)?;
        CheckerInfoStatusReader::verify(&slice[offsets[2]..offsets[3]], compatible)?;
        StringReader::verify(&slice[offsets[3]..offsets[4]], compatible)?;
        Ok(())
    }
}
#[derive(Debug, Default)]
pub struct CheckerInfoCellBuilder {
    pub(crate) unpaid_fee:             Uint128,
    pub(crate) uppaid_check_data_size: Uint128,
    pub(crate) status:                 CheckerInfoStatus,
    pub(crate) rpc_url:                String,
}
impl CheckerInfoCellBuilder {
    pub const FIELD_COUNT: usize = 4;

    pub fn unpaid_fee(mut self, v: Uint128) -> Self {
        self.unpaid_fee = v;
        self
    }

    pub fn uppaid_check_data_size(mut self, v: Uint128) -> Self {
        self.uppaid_check_data_size = v;
        self
    }

    pub fn status(mut self, v: CheckerInfoStatus) -> Self {
        self.status = v;
        self
    }

    pub fn rpc_url(mut self, v: String) -> Self {
        self.rpc_url = v;
        self
    }
}
impl molecule::prelude::Builder for CheckerInfoCellBuilder {
    type Entity = CheckerInfoCell;

    const NAME: &'static str = "CheckerInfoCellBuilder";

    fn expected_length(&self) -> usize {
        molecule::NUMBER_SIZE * (Self::FIELD_COUNT + 1)
            + self.unpaid_fee.as_slice().len()
            + self.uppaid_check_data_size.as_slice().len()
            + self.status.as_slice().len()
            + self.rpc_url.as_slice().len()
    }

    fn write<W: molecule::io::Write>(&self, writer: &mut W) -> molecule::io::Result<()> {
        let mut total_size = molecule::NUMBER_SIZE * (Self::FIELD_COUNT + 1);
        let mut offsets = Vec::with_capacity(Self::FIELD_COUNT);
        offsets.push(total_size);
        total_size += self.unpaid_fee.as_slice().len();
        offsets.push(total_size);
        total_size += self.uppaid_check_data_size.as_slice().len();
        offsets.push(total_size);
        total_size += self.status.as_slice().len();
        offsets.push(total_size);
        total_size += self.rpc_url.as_slice().len();
        writer.write_all(&molecule::pack_number(total_size as molecule::Number))?;
        for offset in offsets.into_iter() {
            writer.write_all(&molecule::pack_number(offset as molecule::Number))?;
        }
        writer.write_all(self.unpaid_fee.as_slice())?;
        writer.write_all(self.uppaid_check_data_size.as_slice())?;
        writer.write_all(self.status.as_slice())?;
        writer.write_all(self.rpc_url.as_slice())?;
        Ok(())
    }

    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        CheckerInfoCell::new_unchecked(inner.into())
    }
}
#[derive(Clone)]
pub struct CheckerInfoCellTypeArgs(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for CheckerInfoCellTypeArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for CheckerInfoCellTypeArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for CheckerInfoCellTypeArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "chain_id", self.chain_id())?;
        write!(f, ", {}: {}", "checker_lock_arg", self.checker_lock_arg())?;
        write!(f, " }}")
    }
}
impl ::core::default::Default for CheckerInfoCellTypeArgs {
    fn default() -> Self {
        let v: Vec<u8> = vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
        CheckerInfoCellTypeArgs::new_unchecked(v.into())
    }
}
impl CheckerInfoCellTypeArgs {
    pub const FIELD_COUNT: usize = 2;
    pub const FIELD_SIZES: [usize; 2] = [4, 20];
    pub const TOTAL_SIZE: usize = 24;

    pub fn chain_id(&self) -> ChainId {
        ChainId::new_unchecked(self.0.slice(0..4))
    }

    pub fn checker_lock_arg(&self) -> PubKeyHash {
        PubKeyHash::new_unchecked(self.0.slice(4..24))
    }

    pub fn as_reader<'r>(&'r self) -> CheckerInfoCellTypeArgsReader<'r> {
        CheckerInfoCellTypeArgsReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for CheckerInfoCellTypeArgs {
    type Builder = CheckerInfoCellTypeArgsBuilder;

    const NAME: &'static str = "CheckerInfoCellTypeArgs";

    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        CheckerInfoCellTypeArgs(data)
    }

    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }

    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }

    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        CheckerInfoCellTypeArgsReader::from_slice(slice).map(|reader| reader.to_entity())
    }

    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        CheckerInfoCellTypeArgsReader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }

    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }

    fn as_builder(self) -> Self::Builder {
        Self::new_builder()
            .chain_id(self.chain_id())
            .checker_lock_arg(self.checker_lock_arg())
    }
}
#[derive(Clone, Copy)]
pub struct CheckerInfoCellTypeArgsReader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for CheckerInfoCellTypeArgsReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for CheckerInfoCellTypeArgsReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for CheckerInfoCellTypeArgsReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "chain_id", self.chain_id())?;
        write!(f, ", {}: {}", "checker_lock_arg", self.checker_lock_arg())?;
        write!(f, " }}")
    }
}
impl<'r> CheckerInfoCellTypeArgsReader<'r> {
    pub const FIELD_COUNT: usize = 2;
    pub const FIELD_SIZES: [usize; 2] = [4, 20];
    pub const TOTAL_SIZE: usize = 24;

    pub fn chain_id(&self) -> ChainIdReader<'r> {
        ChainIdReader::new_unchecked(&self.as_slice()[0..4])
    }

    pub fn checker_lock_arg(&self) -> PubKeyHashReader<'r> {
        PubKeyHashReader::new_unchecked(&self.as_slice()[4..24])
    }
}
impl<'r> molecule::prelude::Reader<'r> for CheckerInfoCellTypeArgsReader<'r> {
    type Entity = CheckerInfoCellTypeArgs;

    const NAME: &'static str = "CheckerInfoCellTypeArgsReader";

    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().to_owned().into())
    }

    fn new_unchecked(slice: &'r [u8]) -> Self {
        CheckerInfoCellTypeArgsReader(slice)
    }

    fn as_slice(&self) -> &'r [u8] {
        self.0
    }

    fn verify(slice: &[u8], _compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len != Self::TOTAL_SIZE {
            return ve!(Self, TotalSizeNotMatch, Self::TOTAL_SIZE, slice_len);
        }
        Ok(())
    }
}
#[derive(Debug, Default)]
pub struct CheckerInfoCellTypeArgsBuilder {
    pub(crate) chain_id:         ChainId,
    pub(crate) checker_lock_arg: PubKeyHash,
}
impl CheckerInfoCellTypeArgsBuilder {
    pub const FIELD_COUNT: usize = 2;
    pub const FIELD_SIZES: [usize; 2] = [4, 20];
    pub const TOTAL_SIZE: usize = 24;

    pub fn chain_id(mut self, v: ChainId) -> Self {
        self.chain_id = v;
        self
    }

    pub fn checker_lock_arg(mut self, v: PubKeyHash) -> Self {
        self.checker_lock_arg = v;
        self
    }
}
impl molecule::prelude::Builder for CheckerInfoCellTypeArgsBuilder {
    type Entity = CheckerInfoCellTypeArgs;

    const NAME: &'static str = "CheckerInfoCellTypeArgsBuilder";

    fn expected_length(&self) -> usize {
        Self::TOTAL_SIZE
    }

    fn write<W: molecule::io::Write>(&self, writer: &mut W) -> molecule::io::Result<()> {
        writer.write_all(self.chain_id.as_slice())?;
        writer.write_all(self.checker_lock_arg.as_slice())?;
        Ok(())
    }

    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        CheckerInfoCellTypeArgs::new_unchecked(inner.into())
    }
}
