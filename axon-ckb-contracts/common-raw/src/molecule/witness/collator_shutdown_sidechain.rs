// Generated by Molecule 0.7.2

use super::super::common::*;
use molecule::prelude::*;
#[derive(Clone)]
pub struct CollatorShutDownSidechainWitness(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for CollatorShutDownSidechainWitness {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for CollatorShutDownSidechainWitness {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for CollatorShutDownSidechainWitness {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "pattern", self.pattern())?;
        write!(f, ", {}: {}", "chain_id", self.chain_id())?;
        write!(f, " }}")
    }
}
impl ::core::default::Default for CollatorShutDownSidechainWitness {
    fn default() -> Self {
        let v: Vec<u8> = vec![0, 0];
        CollatorShutDownSidechainWitness::new_unchecked(v.into())
    }
}
impl CollatorShutDownSidechainWitness {
    pub const FIELD_COUNT: usize = 2;
    pub const FIELD_SIZES: [usize; 2] = [1, 1];
    pub const TOTAL_SIZE: usize = 2;

    pub fn pattern(&self) -> Uint8 {
        Uint8::new_unchecked(self.0.slice(0..1))
    }

    pub fn chain_id(&self) -> Uint8 {
        Uint8::new_unchecked(self.0.slice(1..2))
    }

    pub fn as_reader<'r>(&'r self) -> CollatorShutDownSidechainWitnessReader<'r> {
        CollatorShutDownSidechainWitnessReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for CollatorShutDownSidechainWitness {
    type Builder = CollatorShutDownSidechainWitnessBuilder;

    const NAME: &'static str = "CollatorShutDownSidechainWitness";

    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        CollatorShutDownSidechainWitness(data)
    }

    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }

    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }

    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        CollatorShutDownSidechainWitnessReader::from_slice(slice).map(|reader| reader.to_entity())
    }

    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        CollatorShutDownSidechainWitnessReader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }

    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }

    fn as_builder(self) -> Self::Builder {
        Self::new_builder().pattern(self.pattern()).chain_id(self.chain_id())
    }
}
#[derive(Clone, Copy)]
pub struct CollatorShutDownSidechainWitnessReader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for CollatorShutDownSidechainWitnessReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for CollatorShutDownSidechainWitnessReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for CollatorShutDownSidechainWitnessReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "pattern", self.pattern())?;
        write!(f, ", {}: {}", "chain_id", self.chain_id())?;
        write!(f, " }}")
    }
}
impl<'r> CollatorShutDownSidechainWitnessReader<'r> {
    pub const FIELD_COUNT: usize = 2;
    pub const FIELD_SIZES: [usize; 2] = [1, 1];
    pub const TOTAL_SIZE: usize = 2;

    pub fn pattern(&self) -> Uint8Reader<'r> {
        Uint8Reader::new_unchecked(&self.as_slice()[0..1])
    }

    pub fn chain_id(&self) -> Uint8Reader<'r> {
        Uint8Reader::new_unchecked(&self.as_slice()[1..2])
    }
}
impl<'r> molecule::prelude::Reader<'r> for CollatorShutDownSidechainWitnessReader<'r> {
    type Entity = CollatorShutDownSidechainWitness;

    const NAME: &'static str = "CollatorShutDownSidechainWitnessReader";

    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().to_owned().into())
    }

    fn new_unchecked(slice: &'r [u8]) -> Self {
        CollatorShutDownSidechainWitnessReader(slice)
    }

    fn as_slice(&self) -> &'r [u8] {
        self.0
    }

    fn verify(slice: &[u8], _compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len != Self::TOTAL_SIZE {
            return ve!(Self, TotalSizeNotMatch, Self::TOTAL_SIZE, slice_len);
        }
        Ok(())
    }
}
#[derive(Debug, Default)]
pub struct CollatorShutDownSidechainWitnessBuilder {
    pub(crate) pattern:  Uint8,
    pub(crate) chain_id: Uint8,
}
impl CollatorShutDownSidechainWitnessBuilder {
    pub const FIELD_COUNT: usize = 2;
    pub const FIELD_SIZES: [usize; 2] = [1, 1];
    pub const TOTAL_SIZE: usize = 2;

    pub fn pattern(mut self, v: Uint8) -> Self {
        self.pattern = v;
        self
    }

    pub fn chain_id(mut self, v: Uint8) -> Self {
        self.chain_id = v;
        self
    }
}
impl molecule::prelude::Builder for CollatorShutDownSidechainWitnessBuilder {
    type Entity = CollatorShutDownSidechainWitness;

    const NAME: &'static str = "CollatorShutDownSidechainWitnessBuilder";

    fn expected_length(&self) -> usize {
        Self::TOTAL_SIZE
    }

    fn write<W: molecule::io::Write>(&self, writer: &mut W) -> molecule::io::Result<()> {
        writer.write_all(self.pattern.as_slice())?;
        writer.write_all(self.chain_id.as_slice())?;
        Ok(())
    }

    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        CollatorShutDownSidechainWitness::new_unchecked(inner.into())
    }
}
