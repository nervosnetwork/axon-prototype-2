// Generated by Molecule 0.7.0

use super::super::common::*;
use molecule::prelude::*;
#[derive(Clone)]
pub struct ExistedCommittedCheckerInfo(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for ExistedCommittedCheckerInfo {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for ExistedCommittedCheckerInfo {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for ExistedCommittedCheckerInfo {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "index", self.index())?;
        write!(f, ", {}: {}", "checker_lock_arg", self.checker_lock_arg())?;
        write!(f, ", {}: {}", "origin_committed_hash", self.origin_committed_hash())?;
        write!(f, ", {}: {}", "new_committed_hash", self.new_committed_hash())?;
        let extra_count = self.count_extra_fields();
        if extra_count != 0 {
            write!(f, ", .. ({} fields)", extra_count)?;
        }
        write!(f, " }}")
    }
}
impl ::core::default::Default for ExistedCommittedCheckerInfo {
    fn default() -> Self {
        let v: Vec<u8> = vec![
            40, 0, 0, 0, 20, 0, 0, 0, 20, 0, 0, 0, 40, 0, 0, 0, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        ];
        ExistedCommittedCheckerInfo::new_unchecked(v.into())
    }
}
impl ExistedCommittedCheckerInfo {
    pub const FIELD_COUNT: usize = 4;

    pub fn total_size(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }

    pub fn field_count(&self) -> usize {
        if self.total_size() == molecule::NUMBER_SIZE {
            0
        } else {
            (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1
        }
    }

    pub fn count_extra_fields(&self) -> usize {
        self.field_count() - Self::FIELD_COUNT
    }

    pub fn has_extra_fields(&self) -> bool {
        Self::FIELD_COUNT != self.field_count()
    }

    pub fn index(&self) -> Uint32Opt {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[4..]) as usize;
        let end = molecule::unpack_number(&slice[8..]) as usize;
        Uint32Opt::new_unchecked(self.0.slice(start..end))
    }

    pub fn checker_lock_arg(&self) -> PubKeyHash {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[8..]) as usize;
        let end = molecule::unpack_number(&slice[12..]) as usize;
        PubKeyHash::new_unchecked(self.0.slice(start..end))
    }

    pub fn origin_committed_hash(&self) -> CommittedHashOpt {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[12..]) as usize;
        let end = molecule::unpack_number(&slice[16..]) as usize;
        CommittedHashOpt::new_unchecked(self.0.slice(start..end))
    }

    pub fn new_committed_hash(&self) -> CommittedHashOpt {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[16..]) as usize;
        if self.has_extra_fields() {
            let end = molecule::unpack_number(&slice[20..]) as usize;
            CommittedHashOpt::new_unchecked(self.0.slice(start..end))
        } else {
            CommittedHashOpt::new_unchecked(self.0.slice(start..))
        }
    }

    pub fn as_reader<'r>(&'r self) -> ExistedCommittedCheckerInfoReader<'r> {
        ExistedCommittedCheckerInfoReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for ExistedCommittedCheckerInfo {
    type Builder = ExistedCommittedCheckerInfoBuilder;

    const NAME: &'static str = "ExistedCommittedCheckerInfo";

    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        ExistedCommittedCheckerInfo(data)
    }

    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }

    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }

    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        ExistedCommittedCheckerInfoReader::from_slice(slice).map(|reader| reader.to_entity())
    }

    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        ExistedCommittedCheckerInfoReader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }

    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }

    fn as_builder(self) -> Self::Builder {
        Self::new_builder()
            .index(self.index())
            .checker_lock_arg(self.checker_lock_arg())
            .origin_committed_hash(self.origin_committed_hash())
            .new_committed_hash(self.new_committed_hash())
    }
}
#[derive(Clone, Copy)]
pub struct ExistedCommittedCheckerInfoReader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for ExistedCommittedCheckerInfoReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for ExistedCommittedCheckerInfoReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for ExistedCommittedCheckerInfoReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "index", self.index())?;
        write!(f, ", {}: {}", "checker_lock_arg", self.checker_lock_arg())?;
        write!(f, ", {}: {}", "origin_committed_hash", self.origin_committed_hash())?;
        write!(f, ", {}: {}", "new_committed_hash", self.new_committed_hash())?;
        let extra_count = self.count_extra_fields();
        if extra_count != 0 {
            write!(f, ", .. ({} fields)", extra_count)?;
        }
        write!(f, " }}")
    }
}
impl<'r> ExistedCommittedCheckerInfoReader<'r> {
    pub const FIELD_COUNT: usize = 4;

    pub fn total_size(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }

    pub fn field_count(&self) -> usize {
        if self.total_size() == molecule::NUMBER_SIZE {
            0
        } else {
            (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1
        }
    }

    pub fn count_extra_fields(&self) -> usize {
        self.field_count() - Self::FIELD_COUNT
    }

    pub fn has_extra_fields(&self) -> bool {
        Self::FIELD_COUNT != self.field_count()
    }

    pub fn index(&self) -> Uint32OptReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[4..]) as usize;
        let end = molecule::unpack_number(&slice[8..]) as usize;
        Uint32OptReader::new_unchecked(&self.as_slice()[start..end])
    }

    pub fn checker_lock_arg(&self) -> PubKeyHashReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[8..]) as usize;
        let end = molecule::unpack_number(&slice[12..]) as usize;
        PubKeyHashReader::new_unchecked(&self.as_slice()[start..end])
    }

    pub fn origin_committed_hash(&self) -> CommittedHashOptReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[12..]) as usize;
        let end = molecule::unpack_number(&slice[16..]) as usize;
        CommittedHashOptReader::new_unchecked(&self.as_slice()[start..end])
    }

    pub fn new_committed_hash(&self) -> CommittedHashOptReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[16..]) as usize;
        if self.has_extra_fields() {
            let end = molecule::unpack_number(&slice[20..]) as usize;
            CommittedHashOptReader::new_unchecked(&self.as_slice()[start..end])
        } else {
            CommittedHashOptReader::new_unchecked(&self.as_slice()[start..])
        }
    }
}
impl<'r> molecule::prelude::Reader<'r> for ExistedCommittedCheckerInfoReader<'r> {
    type Entity = ExistedCommittedCheckerInfo;

    const NAME: &'static str = "ExistedCommittedCheckerInfoReader";

    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().to_owned().into())
    }

    fn new_unchecked(slice: &'r [u8]) -> Self {
        ExistedCommittedCheckerInfoReader(slice)
    }

    fn as_slice(&self) -> &'r [u8] {
        self.0
    }

    fn verify(slice: &[u8], compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len < molecule::NUMBER_SIZE {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE, slice_len);
        }
        let total_size = molecule::unpack_number(slice) as usize;
        if slice_len != total_size {
            return ve!(Self, TotalSizeNotMatch, total_size, slice_len);
        }
        if slice_len == molecule::NUMBER_SIZE && Self::FIELD_COUNT == 0 {
            return Ok(());
        }
        if slice_len < molecule::NUMBER_SIZE * 2 {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE * 2, slice_len);
        }
        let offset_first = molecule::unpack_number(&slice[molecule::NUMBER_SIZE..]) as usize;
        if offset_first % molecule::NUMBER_SIZE != 0 || offset_first < molecule::NUMBER_SIZE * 2 {
            return ve!(Self, OffsetsNotMatch);
        }
        if slice_len < offset_first {
            return ve!(Self, HeaderIsBroken, offset_first, slice_len);
        }
        let field_count = offset_first / molecule::NUMBER_SIZE - 1;
        if field_count < Self::FIELD_COUNT {
            return ve!(Self, FieldCountNotMatch, Self::FIELD_COUNT, field_count);
        } else if !compatible && field_count > Self::FIELD_COUNT {
            return ve!(Self, FieldCountNotMatch, Self::FIELD_COUNT, field_count);
        };
        let mut offsets: Vec<usize> = slice[molecule::NUMBER_SIZE..offset_first]
            .chunks_exact(molecule::NUMBER_SIZE)
            .map(|x| molecule::unpack_number(x) as usize)
            .collect();
        offsets.push(total_size);
        if offsets.windows(2).any(|i| i[0] > i[1]) {
            return ve!(Self, OffsetsNotMatch);
        }
        Uint32OptReader::verify(&slice[offsets[0]..offsets[1]], compatible)?;
        PubKeyHashReader::verify(&slice[offsets[1]..offsets[2]], compatible)?;
        CommittedHashOptReader::verify(&slice[offsets[2]..offsets[3]], compatible)?;
        CommittedHashOptReader::verify(&slice[offsets[3]..offsets[4]], compatible)?;
        Ok(())
    }
}
#[derive(Debug, Default)]
pub struct ExistedCommittedCheckerInfoBuilder {
    pub(crate) index:                 Uint32Opt,
    pub(crate) checker_lock_arg:      PubKeyHash,
    pub(crate) origin_committed_hash: CommittedHashOpt,
    pub(crate) new_committed_hash:    CommittedHashOpt,
}
impl ExistedCommittedCheckerInfoBuilder {
    pub const FIELD_COUNT: usize = 4;

    pub fn index(mut self, v: Uint32Opt) -> Self {
        self.index = v;
        self
    }

    pub fn checker_lock_arg(mut self, v: PubKeyHash) -> Self {
        self.checker_lock_arg = v;
        self
    }

    pub fn origin_committed_hash(mut self, v: CommittedHashOpt) -> Self {
        self.origin_committed_hash = v;
        self
    }

    pub fn new_committed_hash(mut self, v: CommittedHashOpt) -> Self {
        self.new_committed_hash = v;
        self
    }
}
impl molecule::prelude::Builder for ExistedCommittedCheckerInfoBuilder {
    type Entity = ExistedCommittedCheckerInfo;

    const NAME: &'static str = "ExistedCommittedCheckerInfoBuilder";

    fn expected_length(&self) -> usize {
        molecule::NUMBER_SIZE * (Self::FIELD_COUNT + 1)
            + self.index.as_slice().len()
            + self.checker_lock_arg.as_slice().len()
            + self.origin_committed_hash.as_slice().len()
            + self.new_committed_hash.as_slice().len()
    }

    fn write<W: ::molecule::io::Write>(&self, writer: &mut W) -> ::molecule::io::Result<()> {
        let mut total_size = molecule::NUMBER_SIZE * (Self::FIELD_COUNT + 1);
        let mut offsets = Vec::with_capacity(Self::FIELD_COUNT);
        offsets.push(total_size);
        total_size += self.index.as_slice().len();
        offsets.push(total_size);
        total_size += self.checker_lock_arg.as_slice().len();
        offsets.push(total_size);
        total_size += self.origin_committed_hash.as_slice().len();
        offsets.push(total_size);
        total_size += self.new_committed_hash.as_slice().len();
        writer.write_all(&molecule::pack_number(total_size as molecule::Number))?;
        for offset in offsets.into_iter() {
            writer.write_all(&molecule::pack_number(offset as molecule::Number))?;
        }
        writer.write_all(self.index.as_slice())?;
        writer.write_all(self.checker_lock_arg.as_slice())?;
        writer.write_all(self.origin_committed_hash.as_slice())?;
        writer.write_all(self.new_committed_hash.as_slice())?;
        Ok(())
    }

    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        ExistedCommittedCheckerInfo::new_unchecked(inner.into())
    }
}
#[derive(Clone)]
pub struct ExistedCommittedCheckerInfos(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for ExistedCommittedCheckerInfos {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for ExistedCommittedCheckerInfos {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for ExistedCommittedCheckerInfos {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} [", Self::NAME)?;
        for i in 0..self.len() {
            if i == 0 {
                write!(f, "{}", self.get_unchecked(i))?;
            } else {
                write!(f, ", {}", self.get_unchecked(i))?;
            }
        }
        write!(f, "]")
    }
}
impl ::core::default::Default for ExistedCommittedCheckerInfos {
    fn default() -> Self {
        let v: Vec<u8> = vec![4, 0, 0, 0];
        ExistedCommittedCheckerInfos::new_unchecked(v.into())
    }
}
impl ExistedCommittedCheckerInfos {
    pub fn total_size(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }

    pub fn item_count(&self) -> usize {
        if self.total_size() == molecule::NUMBER_SIZE {
            0
        } else {
            (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1
        }
    }

    pub fn len(&self) -> usize {
        self.item_count()
    }

    pub fn is_empty(&self) -> bool {
        self.len() == 0
    }

    pub fn get(&self, idx: usize) -> Option<ExistedCommittedCheckerInfo> {
        if idx >= self.len() {
            None
        } else {
            Some(self.get_unchecked(idx))
        }
    }

    pub fn get_unchecked(&self, idx: usize) -> ExistedCommittedCheckerInfo {
        let slice = self.as_slice();
        let start_idx = molecule::NUMBER_SIZE * (1 + idx);
        let start = molecule::unpack_number(&slice[start_idx..]) as usize;
        if idx == self.len() - 1 {
            ExistedCommittedCheckerInfo::new_unchecked(self.0.slice(start..))
        } else {
            let end_idx = start_idx + molecule::NUMBER_SIZE;
            let end = molecule::unpack_number(&slice[end_idx..]) as usize;
            ExistedCommittedCheckerInfo::new_unchecked(self.0.slice(start..end))
        }
    }

    pub fn as_reader<'r>(&'r self) -> ExistedCommittedCheckerInfosReader<'r> {
        ExistedCommittedCheckerInfosReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for ExistedCommittedCheckerInfos {
    type Builder = ExistedCommittedCheckerInfosBuilder;

    const NAME: &'static str = "ExistedCommittedCheckerInfos";

    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        ExistedCommittedCheckerInfos(data)
    }

    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }

    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }

    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        ExistedCommittedCheckerInfosReader::from_slice(slice).map(|reader| reader.to_entity())
    }

    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        ExistedCommittedCheckerInfosReader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }

    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }

    fn as_builder(self) -> Self::Builder {
        Self::new_builder().extend(self.into_iter())
    }
}
#[derive(Clone, Copy)]
pub struct ExistedCommittedCheckerInfosReader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for ExistedCommittedCheckerInfosReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for ExistedCommittedCheckerInfosReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for ExistedCommittedCheckerInfosReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} [", Self::NAME)?;
        for i in 0..self.len() {
            if i == 0 {
                write!(f, "{}", self.get_unchecked(i))?;
            } else {
                write!(f, ", {}", self.get_unchecked(i))?;
            }
        }
        write!(f, "]")
    }
}
impl<'r> ExistedCommittedCheckerInfosReader<'r> {
    pub fn total_size(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }

    pub fn item_count(&self) -> usize {
        if self.total_size() == molecule::NUMBER_SIZE {
            0
        } else {
            (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1
        }
    }

    pub fn len(&self) -> usize {
        self.item_count()
    }

    pub fn is_empty(&self) -> bool {
        self.len() == 0
    }

    pub fn get(&self, idx: usize) -> Option<ExistedCommittedCheckerInfoReader<'r>> {
        if idx >= self.len() {
            None
        } else {
            Some(self.get_unchecked(idx))
        }
    }

    pub fn get_unchecked(&self, idx: usize) -> ExistedCommittedCheckerInfoReader<'r> {
        let slice = self.as_slice();
        let start_idx = molecule::NUMBER_SIZE * (1 + idx);
        let start = molecule::unpack_number(&slice[start_idx..]) as usize;
        if idx == self.len() - 1 {
            ExistedCommittedCheckerInfoReader::new_unchecked(&self.as_slice()[start..])
        } else {
            let end_idx = start_idx + molecule::NUMBER_SIZE;
            let end = molecule::unpack_number(&slice[end_idx..]) as usize;
            ExistedCommittedCheckerInfoReader::new_unchecked(&self.as_slice()[start..end])
        }
    }
}
impl<'r> molecule::prelude::Reader<'r> for ExistedCommittedCheckerInfosReader<'r> {
    type Entity = ExistedCommittedCheckerInfos;

    const NAME: &'static str = "ExistedCommittedCheckerInfosReader";

    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().to_owned().into())
    }

    fn new_unchecked(slice: &'r [u8]) -> Self {
        ExistedCommittedCheckerInfosReader(slice)
    }

    fn as_slice(&self) -> &'r [u8] {
        self.0
    }

    fn verify(slice: &[u8], compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len < molecule::NUMBER_SIZE {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE, slice_len);
        }
        let total_size = molecule::unpack_number(slice) as usize;
        if slice_len != total_size {
            return ve!(Self, TotalSizeNotMatch, total_size, slice_len);
        }
        if slice_len == molecule::NUMBER_SIZE {
            return Ok(());
        }
        if slice_len < molecule::NUMBER_SIZE * 2 {
            return ve!(Self, TotalSizeNotMatch, molecule::NUMBER_SIZE * 2, slice_len);
        }
        let offset_first = molecule::unpack_number(&slice[molecule::NUMBER_SIZE..]) as usize;
        if offset_first % molecule::NUMBER_SIZE != 0 || offset_first < molecule::NUMBER_SIZE * 2 {
            return ve!(Self, OffsetsNotMatch);
        }
        if slice_len < offset_first {
            return ve!(Self, HeaderIsBroken, offset_first, slice_len);
        }
        let mut offsets: Vec<usize> = slice[molecule::NUMBER_SIZE..offset_first]
            .chunks_exact(molecule::NUMBER_SIZE)
            .map(|x| molecule::unpack_number(x) as usize)
            .collect();
        offsets.push(total_size);
        if offsets.windows(2).any(|i| i[0] > i[1]) {
            return ve!(Self, OffsetsNotMatch);
        }
        for pair in offsets.windows(2) {
            let start = pair[0];
            let end = pair[1];
            ExistedCommittedCheckerInfoReader::verify(&slice[start..end], compatible)?;
        }
        Ok(())
    }
}
#[derive(Debug, Default)]
pub struct ExistedCommittedCheckerInfosBuilder(pub(crate) Vec<ExistedCommittedCheckerInfo>);
impl ExistedCommittedCheckerInfosBuilder {
    pub fn set(mut self, v: Vec<ExistedCommittedCheckerInfo>) -> Self {
        self.0 = v;
        self
    }

    pub fn push(mut self, v: ExistedCommittedCheckerInfo) -> Self {
        self.0.push(v);
        self
    }

    pub fn extend<T: ::core::iter::IntoIterator<Item = ExistedCommittedCheckerInfo>>(mut self, iter: T) -> Self {
        for elem in iter {
            self.0.push(elem);
        }
        self
    }
}
impl molecule::prelude::Builder for ExistedCommittedCheckerInfosBuilder {
    type Entity = ExistedCommittedCheckerInfos;

    const NAME: &'static str = "ExistedCommittedCheckerInfosBuilder";

    fn expected_length(&self) -> usize {
        molecule::NUMBER_SIZE * (self.0.len() + 1) + self.0.iter().map(|inner| inner.as_slice().len()).sum::<usize>()
    }

    fn write<W: ::molecule::io::Write>(&self, writer: &mut W) -> ::molecule::io::Result<()> {
        let item_count = self.0.len();
        if item_count == 0 {
            writer.write_all(&molecule::pack_number(molecule::NUMBER_SIZE as molecule::Number))?;
        } else {
            let (total_size, offsets) = self.0.iter().fold(
                (molecule::NUMBER_SIZE * (item_count + 1), Vec::with_capacity(item_count)),
                |(start, mut offsets), inner| {
                    offsets.push(start);
                    (start + inner.as_slice().len(), offsets)
                },
            );
            writer.write_all(&molecule::pack_number(total_size as molecule::Number))?;
            for offset in offsets.into_iter() {
                writer.write_all(&molecule::pack_number(offset as molecule::Number))?;
            }
            for inner in self.0.iter() {
                writer.write_all(inner.as_slice())?;
            }
        }
        Ok(())
    }

    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        ExistedCommittedCheckerInfos::new_unchecked(inner.into())
    }
}
pub struct ExistedCommittedCheckerInfosIterator(ExistedCommittedCheckerInfos, usize, usize);
impl ::core::iter::Iterator for ExistedCommittedCheckerInfosIterator {
    type Item = ExistedCommittedCheckerInfo;

    fn next(&mut self) -> Option<Self::Item> {
        if self.1 >= self.2 {
            None
        } else {
            let ret = self.0.get_unchecked(self.1);
            self.1 += 1;
            Some(ret)
        }
    }
}
impl ::core::iter::ExactSizeIterator for ExistedCommittedCheckerInfosIterator {
    fn len(&self) -> usize {
        self.2 - self.1
    }
}
impl ::core::iter::IntoIterator for ExistedCommittedCheckerInfos {
    type IntoIter = ExistedCommittedCheckerInfosIterator;
    type Item = ExistedCommittedCheckerInfo;

    fn into_iter(self) -> Self::IntoIter {
        let len = self.len();
        ExistedCommittedCheckerInfosIterator(self, 0, len)
    }
}
impl<'r> ExistedCommittedCheckerInfosReader<'r> {
    pub fn iter<'t>(&'t self) -> ExistedCommittedCheckerInfosReaderIterator<'t, 'r> {
        ExistedCommittedCheckerInfosReaderIterator(&self, 0, self.len())
    }
}
pub struct ExistedCommittedCheckerInfosReaderIterator<'t, 'r>(&'t ExistedCommittedCheckerInfosReader<'r>, usize, usize);
impl<'t: 'r, 'r> ::core::iter::Iterator for ExistedCommittedCheckerInfosReaderIterator<'t, 'r> {
    type Item = ExistedCommittedCheckerInfoReader<'t>;

    fn next(&mut self) -> Option<Self::Item> {
        if self.1 >= self.2 {
            None
        } else {
            let ret = self.0.get_unchecked(self.1);
            self.1 += 1;
            Some(ret)
        }
    }
}
impl<'t: 'r, 'r> ::core::iter::ExactSizeIterator for ExistedCommittedCheckerInfosReaderIterator<'t, 'r> {
    fn len(&self) -> usize {
        self.2 - self.1
    }
}
#[derive(Clone)]
pub struct CollatorSubmitTasksWitness(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for CollatorSubmitTasksWitness {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for CollatorSubmitTasksWitness {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for CollatorSubmitTasksWitness {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "chain_id", self.chain_id())?;
        write!(f, ", {}: {}", "challenge_times", self.challenge_times())?;
        write!(f, ", {}: {}", "commit", self.commit())?;
        write!(f, ", {}: {}", "origin_random_seed", self.origin_random_seed())?;
        write!(f, ", {}: {}", "new_random_seed", self.new_random_seed())?;
        write!(f, ", {}: {}", "fee", self.fee())?;
        write!(f, ", {}: {}", "fee_per_checker", self.fee_per_checker())?;
        let extra_count = self.count_extra_fields();
        if extra_count != 0 {
            write!(f, ", .. ({} fields)", extra_count)?;
        }
        write!(f, " }}")
    }
}
impl ::core::default::Default for CollatorSubmitTasksWitness {
    fn default() -> Self {
        let v: Vec<u8> = vec![
            140, 0, 0, 0, 32, 0, 0, 0, 36, 0, 0, 0, 40, 0, 0, 0, 44, 0, 0, 0, 76, 0, 0, 0, 108, 0, 0, 0, 124, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        ];
        CollatorSubmitTasksWitness::new_unchecked(v.into())
    }
}
impl CollatorSubmitTasksWitness {
    pub const FIELD_COUNT: usize = 7;

    pub fn total_size(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }

    pub fn field_count(&self) -> usize {
        if self.total_size() == molecule::NUMBER_SIZE {
            0
        } else {
            (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1
        }
    }

    pub fn count_extra_fields(&self) -> usize {
        self.field_count() - Self::FIELD_COUNT
    }

    pub fn has_extra_fields(&self) -> bool {
        Self::FIELD_COUNT != self.field_count()
    }

    pub fn chain_id(&self) -> ChainId {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[4..]) as usize;
        let end = molecule::unpack_number(&slice[8..]) as usize;
        ChainId::new_unchecked(self.0.slice(start..end))
    }

    pub fn challenge_times(&self) -> Uint32 {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[8..]) as usize;
        let end = molecule::unpack_number(&slice[12..]) as usize;
        Uint32::new_unchecked(self.0.slice(start..end))
    }

    pub fn commit(&self) -> ExistedCommittedCheckerInfos {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[12..]) as usize;
        let end = molecule::unpack_number(&slice[16..]) as usize;
        ExistedCommittedCheckerInfos::new_unchecked(self.0.slice(start..end))
    }

    pub fn origin_random_seed(&self) -> RandomSeed {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[16..]) as usize;
        let end = molecule::unpack_number(&slice[20..]) as usize;
        RandomSeed::new_unchecked(self.0.slice(start..end))
    }

    pub fn new_random_seed(&self) -> RandomSeed {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[20..]) as usize;
        let end = molecule::unpack_number(&slice[24..]) as usize;
        RandomSeed::new_unchecked(self.0.slice(start..end))
    }

    pub fn fee(&self) -> Uint128 {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[24..]) as usize;
        let end = molecule::unpack_number(&slice[28..]) as usize;
        Uint128::new_unchecked(self.0.slice(start..end))
    }

    pub fn fee_per_checker(&self) -> Uint128 {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[28..]) as usize;
        if self.has_extra_fields() {
            let end = molecule::unpack_number(&slice[32..]) as usize;
            Uint128::new_unchecked(self.0.slice(start..end))
        } else {
            Uint128::new_unchecked(self.0.slice(start..))
        }
    }

    pub fn as_reader<'r>(&'r self) -> CollatorSubmitTasksWitnessReader<'r> {
        CollatorSubmitTasksWitnessReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for CollatorSubmitTasksWitness {
    type Builder = CollatorSubmitTasksWitnessBuilder;

    const NAME: &'static str = "CollatorSubmitTasksWitness";

    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        CollatorSubmitTasksWitness(data)
    }

    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }

    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }

    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        CollatorSubmitTasksWitnessReader::from_slice(slice).map(|reader| reader.to_entity())
    }

    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        CollatorSubmitTasksWitnessReader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }

    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }

    fn as_builder(self) -> Self::Builder {
        Self::new_builder()
            .chain_id(self.chain_id())
            .challenge_times(self.challenge_times())
            .commit(self.commit())
            .origin_random_seed(self.origin_random_seed())
            .new_random_seed(self.new_random_seed())
            .fee(self.fee())
            .fee_per_checker(self.fee_per_checker())
    }
}
#[derive(Clone, Copy)]
pub struct CollatorSubmitTasksWitnessReader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for CollatorSubmitTasksWitnessReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for CollatorSubmitTasksWitnessReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for CollatorSubmitTasksWitnessReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "chain_id", self.chain_id())?;
        write!(f, ", {}: {}", "challenge_times", self.challenge_times())?;
        write!(f, ", {}: {}", "commit", self.commit())?;
        write!(f, ", {}: {}", "origin_random_seed", self.origin_random_seed())?;
        write!(f, ", {}: {}", "new_random_seed", self.new_random_seed())?;
        write!(f, ", {}: {}", "fee", self.fee())?;
        write!(f, ", {}: {}", "fee_per_checker", self.fee_per_checker())?;
        let extra_count = self.count_extra_fields();
        if extra_count != 0 {
            write!(f, ", .. ({} fields)", extra_count)?;
        }
        write!(f, " }}")
    }
}
impl<'r> CollatorSubmitTasksWitnessReader<'r> {
    pub const FIELD_COUNT: usize = 7;

    pub fn total_size(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }

    pub fn field_count(&self) -> usize {
        if self.total_size() == molecule::NUMBER_SIZE {
            0
        } else {
            (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1
        }
    }

    pub fn count_extra_fields(&self) -> usize {
        self.field_count() - Self::FIELD_COUNT
    }

    pub fn has_extra_fields(&self) -> bool {
        Self::FIELD_COUNT != self.field_count()
    }

    pub fn chain_id(&self) -> ChainIdReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[4..]) as usize;
        let end = molecule::unpack_number(&slice[8..]) as usize;
        ChainIdReader::new_unchecked(&self.as_slice()[start..end])
    }

    pub fn challenge_times(&self) -> Uint32Reader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[8..]) as usize;
        let end = molecule::unpack_number(&slice[12..]) as usize;
        Uint32Reader::new_unchecked(&self.as_slice()[start..end])
    }

    pub fn commit(&self) -> ExistedCommittedCheckerInfosReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[12..]) as usize;
        let end = molecule::unpack_number(&slice[16..]) as usize;
        ExistedCommittedCheckerInfosReader::new_unchecked(&self.as_slice()[start..end])
    }

    pub fn origin_random_seed(&self) -> RandomSeedReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[16..]) as usize;
        let end = molecule::unpack_number(&slice[20..]) as usize;
        RandomSeedReader::new_unchecked(&self.as_slice()[start..end])
    }

    pub fn new_random_seed(&self) -> RandomSeedReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[20..]) as usize;
        let end = molecule::unpack_number(&slice[24..]) as usize;
        RandomSeedReader::new_unchecked(&self.as_slice()[start..end])
    }

    pub fn fee(&self) -> Uint128Reader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[24..]) as usize;
        let end = molecule::unpack_number(&slice[28..]) as usize;
        Uint128Reader::new_unchecked(&self.as_slice()[start..end])
    }

    pub fn fee_per_checker(&self) -> Uint128Reader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[28..]) as usize;
        if self.has_extra_fields() {
            let end = molecule::unpack_number(&slice[32..]) as usize;
            Uint128Reader::new_unchecked(&self.as_slice()[start..end])
        } else {
            Uint128Reader::new_unchecked(&self.as_slice()[start..])
        }
    }
}
impl<'r> molecule::prelude::Reader<'r> for CollatorSubmitTasksWitnessReader<'r> {
    type Entity = CollatorSubmitTasksWitness;

    const NAME: &'static str = "CollatorSubmitTasksWitnessReader";

    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().to_owned().into())
    }

    fn new_unchecked(slice: &'r [u8]) -> Self {
        CollatorSubmitTasksWitnessReader(slice)
    }

    fn as_slice(&self) -> &'r [u8] {
        self.0
    }

    fn verify(slice: &[u8], compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len < molecule::NUMBER_SIZE {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE, slice_len);
        }
        let total_size = molecule::unpack_number(slice) as usize;
        if slice_len != total_size {
            return ve!(Self, TotalSizeNotMatch, total_size, slice_len);
        }
        if slice_len == molecule::NUMBER_SIZE && Self::FIELD_COUNT == 0 {
            return Ok(());
        }
        if slice_len < molecule::NUMBER_SIZE * 2 {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE * 2, slice_len);
        }
        let offset_first = molecule::unpack_number(&slice[molecule::NUMBER_SIZE..]) as usize;
        if offset_first % molecule::NUMBER_SIZE != 0 || offset_first < molecule::NUMBER_SIZE * 2 {
            return ve!(Self, OffsetsNotMatch);
        }
        if slice_len < offset_first {
            return ve!(Self, HeaderIsBroken, offset_first, slice_len);
        }
        let field_count = offset_first / molecule::NUMBER_SIZE - 1;
        if field_count < Self::FIELD_COUNT {
            return ve!(Self, FieldCountNotMatch, Self::FIELD_COUNT, field_count);
        } else if !compatible && field_count > Self::FIELD_COUNT {
            return ve!(Self, FieldCountNotMatch, Self::FIELD_COUNT, field_count);
        };
        let mut offsets: Vec<usize> = slice[molecule::NUMBER_SIZE..offset_first]
            .chunks_exact(molecule::NUMBER_SIZE)
            .map(|x| molecule::unpack_number(x) as usize)
            .collect();
        offsets.push(total_size);
        if offsets.windows(2).any(|i| i[0] > i[1]) {
            return ve!(Self, OffsetsNotMatch);
        }
        ChainIdReader::verify(&slice[offsets[0]..offsets[1]], compatible)?;
        Uint32Reader::verify(&slice[offsets[1]..offsets[2]], compatible)?;
        ExistedCommittedCheckerInfosReader::verify(&slice[offsets[2]..offsets[3]], compatible)?;
        RandomSeedReader::verify(&slice[offsets[3]..offsets[4]], compatible)?;
        RandomSeedReader::verify(&slice[offsets[4]..offsets[5]], compatible)?;
        Uint128Reader::verify(&slice[offsets[5]..offsets[6]], compatible)?;
        Uint128Reader::verify(&slice[offsets[6]..offsets[7]], compatible)?;
        Ok(())
    }
}
#[derive(Debug, Default)]
pub struct CollatorSubmitTasksWitnessBuilder {
    pub(crate) chain_id:           ChainId,
    pub(crate) challenge_times:    Uint32,
    pub(crate) commit:             ExistedCommittedCheckerInfos,
    pub(crate) origin_random_seed: RandomSeed,
    pub(crate) new_random_seed:    RandomSeed,
    pub(crate) fee:                Uint128,
    pub(crate) fee_per_checker:    Uint128,
}
impl CollatorSubmitTasksWitnessBuilder {
    pub const FIELD_COUNT: usize = 7;

    pub fn chain_id(mut self, v: ChainId) -> Self {
        self.chain_id = v;
        self
    }

    pub fn challenge_times(mut self, v: Uint32) -> Self {
        self.challenge_times = v;
        self
    }

    pub fn commit(mut self, v: ExistedCommittedCheckerInfos) -> Self {
        self.commit = v;
        self
    }

    pub fn origin_random_seed(mut self, v: RandomSeed) -> Self {
        self.origin_random_seed = v;
        self
    }

    pub fn new_random_seed(mut self, v: RandomSeed) -> Self {
        self.new_random_seed = v;
        self
    }

    pub fn fee(mut self, v: Uint128) -> Self {
        self.fee = v;
        self
    }

    pub fn fee_per_checker(mut self, v: Uint128) -> Self {
        self.fee_per_checker = v;
        self
    }
}
impl molecule::prelude::Builder for CollatorSubmitTasksWitnessBuilder {
    type Entity = CollatorSubmitTasksWitness;

    const NAME: &'static str = "CollatorSubmitTasksWitnessBuilder";

    fn expected_length(&self) -> usize {
        molecule::NUMBER_SIZE * (Self::FIELD_COUNT + 1)
            + self.chain_id.as_slice().len()
            + self.challenge_times.as_slice().len()
            + self.commit.as_slice().len()
            + self.origin_random_seed.as_slice().len()
            + self.new_random_seed.as_slice().len()
            + self.fee.as_slice().len()
            + self.fee_per_checker.as_slice().len()
    }

    fn write<W: ::molecule::io::Write>(&self, writer: &mut W) -> ::molecule::io::Result<()> {
        let mut total_size = molecule::NUMBER_SIZE * (Self::FIELD_COUNT + 1);
        let mut offsets = Vec::with_capacity(Self::FIELD_COUNT);
        offsets.push(total_size);
        total_size += self.chain_id.as_slice().len();
        offsets.push(total_size);
        total_size += self.challenge_times.as_slice().len();
        offsets.push(total_size);
        total_size += self.commit.as_slice().len();
        offsets.push(total_size);
        total_size += self.origin_random_seed.as_slice().len();
        offsets.push(total_size);
        total_size += self.new_random_seed.as_slice().len();
        offsets.push(total_size);
        total_size += self.fee.as_slice().len();
        offsets.push(total_size);
        total_size += self.fee_per_checker.as_slice().len();
        writer.write_all(&molecule::pack_number(total_size as molecule::Number))?;
        for offset in offsets.into_iter() {
            writer.write_all(&molecule::pack_number(offset as molecule::Number))?;
        }
        writer.write_all(self.chain_id.as_slice())?;
        writer.write_all(self.challenge_times.as_slice())?;
        writer.write_all(self.commit.as_slice())?;
        writer.write_all(self.origin_random_seed.as_slice())?;
        writer.write_all(self.new_random_seed.as_slice())?;
        writer.write_all(self.fee.as_slice())?;
        writer.write_all(self.fee_per_checker.as_slice())?;
        Ok(())
    }

    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        CollatorSubmitTasksWitness::new_unchecked(inner.into())
    }
}
